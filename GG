<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Ultimate Food Game ‚Äî All In One</title>
<style>
/* ---------- base / themes ---------- */
*{box-sizing:border-box}
:root{
  --bg:#000;
  --bg-overlay:0.10;
  --fg:#fff;
  --card-bg:rgba(0,0,0,0.75);
  --accent:#fff;
  --muted:rgba(255,255,255,0.06);
  --panel-w:360px;
  --glass: rgba(255,255,255,0.03);
  --ui-scale:1;
}
/* layout */
html,body{height:100%}
body{
  margin:0;font-family:Inter,Arial,Helvetica,sans-serif;
  background:var(--bg);color:var(--fg);
  min-height:100vh;display:flex;flex-direction:column;align-items:center;padding:12px;overflow-x:hidden;position:relative;transform:scale(var(--ui-scale));
}
/* overlay for adjustable transparency */
#bgOverlay{position:fixed;inset:0;pointer-events:none;background:rgba(0,0,0,var(--bg-overlay));z-index:0;transition:background .25s ease}

/* wrapper */
#app{width:100%;max-width:1100px;z-index:2;transition:filter .3s}

/* header */
h1{margin:10px 0 14px;text-align:center;font-size:20px}

/* container */
.container{display:grid;grid-template-columns:1fr var(--panel-w);gap:12px;width:100%}
@media(max-width:980px){ .container{grid-template-columns:1fr} }

/* card */
.card{background:var(--card-bg);border:2px solid var(--accent);border-radius:12px;padding:12px;margin-bottom:12px;backdrop-filter:blur(6px);transition:transform .2s ease, box-shadow .2s ease}
.card:active{transform:translateY(2px)}
.controls{display:flex;flex-wrap:wrap;gap:8px;justify-content:center;margin-bottom:8px}
.btn{background:transparent;color:var(--fg);border:2px solid var(--accent);padding:8px 12px;border-radius:8px;cursor:pointer;font-weight:700;transition:background .14s, color .14s, transform .12s}
.btn:hover{transform:translateY(-2px); background:var(--accent); color:var(--bg)}
.small{font-size:13px;color:var(--fg)}

/* result & log */
#result{font-size:16px;text-align:center;padding:14px;border-radius:10px;margin-bottom:8px;background:linear-gradient(90deg,#ffffff06,#ffffff03);font-weight:800;letter-spacing:.2px}
#log{max-height:220px;overflow:auto;padding:8px;border-radius:8px;background:var(--muted);font-size:13px}
.log-row{display:flex;gap:8px;align-items:center;margin:6px 0;opacity:0;animation:logIn .35s forwards}
@keyframes logIn{to{opacity:1;transform:none}}
.log-dot{width:10px;height:10px;border-radius:50%}
.secret{color:#ff77ff;font-weight:700}
.legendary{color:gold;font-weight:700}

/* right panel */
.panel{display:flex;flex-direction:column;height:100%}
.panel .tabs{display:flex;gap:6px;margin-bottom:8px}
.tab{flex:1;padding:8px;border-radius:8px;border:1px solid var(--accent);text-align:center;cursor:pointer;background:transparent;color:var(--fg);font-weight:700;transition:background .18s,color .18s}
.tab.active{background:var(--accent);color:var(--bg)}
.panel .panel-body{overflow:auto;padding:8px;background:linear-gradient(180deg,rgba(255,255,255,0.02),rgba(255,255,255,0.01));border-radius:8px;min-height:420px}

/* dex grid */
.dex-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(110px,1fr));gap:8px}
.dex-item{display:flex;flex-direction:column;align-items:center;padding:8px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;transition:transform .12s,box-shadow .12s}
.dex-item.locked{opacity:.45}
.dex-item:hover{transform:translateY(-6px);box-shadow:0 8px 28px rgba(0,0,0,0.5)}
.dex-emoji{font-size:28px;margin-bottom:6px}
.dex-name{font-size:13px;word-break:break-word}

/* achievements */
.ach-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));gap:8px}
.ach-card{padding:10px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;transition:transform .14s}
.ach-card.unlocked{border:1px solid gold;box-shadow:0 8px 20px rgba(255,215,0,0.06)}
.ach-title{font-weight:800}

/* combos */
.combo-card{padding:10px;border-radius:8px;background:rgba(255,255,255,0.02);margin-bottom:8px}
.combo-req{display:flex;gap:6px;flex-wrap:wrap;margin-bottom:6px}
.combo-result{font-weight:800}

/* drop rates tab */
.drop-row{display:flex;align-items:center;gap:10px;margin:8px 0}
.rate-bar{flex:1;height:14px;border-radius:999px;background:linear-gradient(90deg,#333,#222);overflow:hidden;border:1px solid rgba(255,255,255,0.04)}
.rate-fill{height:100%;width:0%;transition:width .8s cubic-bezier(.2,.8,.2,1)}
.rate-label{min-width:110px;text-align:right;font-size:13px}

/* progress bars special */
.rainbow{background:linear-gradient(90deg,#ff6ec7,#ffd27f,#9effa1,#7adfff,#c9a9ff);filter:saturate(1.2);}

/* secret bar style */
.secret-fill{background:linear-gradient(90deg,#ff4d6d,#ff7b90);box-shadow:0 6px 30px rgba(255,80,120,0.12)}
.mythic-fill{background:linear-gradient(90deg,#9effa1,#7adfff,#c9a9ff);box-shadow:0 6px 30px rgba(150,200,255,0.08)}

/* float area */
#floatArea{position:fixed;inset:0;pointer-events:none;z-index:0;overflow:hidden}
.float-emoji{position:absolute;font-size:22px;opacity:0.92;will-change:transform,opacity;transition:transform 8s linear, opacity 8s linear}

/* confetti canvas */
#confetti{position:fixed;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:9999}

/* golden background unlock */
.gold-bg{
  background:linear-gradient(180deg,#2b1f00,#4b3000); /* base */
}
.gold-glitter{position:fixed;inset:0;pointer-events:none;z-index:1;mix-blend-mode:screen}

/* floating bubble animation for aero themes */
.bubble{position:absolute;border-radius:50%;opacity:.9;mix-blend-mode:screen;pointer-events:none;transform:translateY(20vh);animation:rise 14s linear infinite}
@keyframes rise{0%{transform:translateY(80vh) scale(.6);opacity:0}30%{opacity:.9}100%{transform:translateY(-40vh) scale(1.2);opacity:0}}

/* small helper text */
.small-muted{font-size:12px;color:rgba(255,255,255,0.7)}

/* anim helpers */
.pop{animation:pop .36s cubic-bezier(.2,.9,.2,1)}
@keyframes pop{0%{transform:scale(.92);opacity:.6}60%{transform:scale(1.06);opacity:1}100%{transform:scale(1)}}

/* responsive tweaks */
@media(max-width:980px){ #settingsDrawer{left:8px;right:8px;width:auto} }
</style>
</head>
<body>
<div id="bgOverlay"></div>
<div id="floatArea"></div>

<div id="app">
  <h1>üç¥ Ultimate Food Game ‚Äî All In One (Single Screen)</h1>

  <div class="container card">
    <div>
      <div id="result">You Got: ‚Äî</div>

      <div class="controls">
        <button class="btn" id="roll1">üé≤ Roll 1</button>
        <button class="btn" id="infoBtn">‚ÑπÔ∏è Drop Rates & Pity</button>
        <button class="btn" id="settingsBtn">‚öôÔ∏è Settings</button>
      </div>

      <div id="log" aria-live="polite"></div>

      <div class="card" style="margin-top:8px">
        <h3 style="margin:0 0 8px">Quick Actions</h3>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <button class="btn" id="openDex">üìñ Open Food Dex</button>
          <button class="btn" id="openAch">üèÜ Open Achievements</button>
          <button class="btn" id="openCombos">üß© Open Combos</button>
          <button class="btn" id="resetAll">üîÑ Reset All Data</button>
        </div>
      </div>

    </div>

    <div class="panel">
      <div class="tabs">
        <div class="tab active" data-tab="foodsTab">Foods</div>
        <div class="tab" data-tab="achsTab">Achievements</div>
        <div class="tab" data-tab="combosTab">Combos</div>
        <div class="tab" data-tab="dropsTab">Drop Rates</div>
        <div class="tab" data-tab="devTab">Stats / Dev</div>
      </div>

      <div class="panel-body card" id="panelBody">
        <!-- Foods -->
        <div id="foodsTab" class="tab-pane">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Food Dex</strong> <span id="dexProgress" class="small-muted"></span></div>
            <div class="small-muted">Sort: <select id="dexSort"><option value="alpha">A‚ÜíZ</option><option value="rarity">Rarity</option></select></div>
          </div>
          <div id="foodsGrid" class="dex-grid"></div>
        </div>

        <!-- Achievements -->
        <div id="achsTab" class="tab-pane" style="display:none">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Achievements</strong> <span id="achProgress" class="small-muted"></span></div>
            <div class="small-muted">Filter: <select id="achFilter"><option value="all">All</option><option value="unlocked">Unlocked</option><option value="locked">Locked</option></select></div>
          </div>
          <div id="achGrid" class="ach-grid"></div>
        </div>

        <!-- Combos -->
        <div id="combosTab" class="tab-pane" style="display:none">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Combos / Recipes</strong></div>
            <div class="small-muted">Tip: combos consume ingredients automatically when created.</div>
          </div>
          <div id="combosList"></div>
        </div>

        <!-- Drop Rates & Pity -->
        <div id="dropsTab" class="tab-pane" style="display:none">
          <h4 style="margin-top:0">Drop Rates & Pity</h4>
          <div class="small-muted" style="margin-bottom:8px">Displayed per-pull target probabilities (approx). Mythic and Secret have dedicated pity counters shown below.</div>

          <div class="drop-row"><div class="rate-label">Common</div><div class="rate-bar"><div id="fill-common" class="rate-fill" style="background:#7adfff"></div></div><div style="width:70px;text-align:right">~high</div></div>
          <div class="drop-row"><div class="rate-label">Uncommon</div><div class="rate-bar"><div id="fill-uncommon" class="rate-fill" style="background:#9effa1"></div></div><div style="width:70px;text-align:right">~mid</div></div>
          <div class="drop-row"><div class="rate-label">Rare</div><div class="rate-bar"><div id="fill-rare" class="rate-fill" style="background:#ffd27f"></div></div><div style="width:70px;text-align:right">~low</div></div>
          <div class="drop-row"><div class="rate-label">Legendary</div><div class="rate-bar"><div id="fill-legendary" class="rate-fill" style="background:gold"></div></div><div style="width:70px;text-align:right">very low</div></div>
          <div class="drop-row"><div class="rate-label">Mythic</div><div class="rate-bar"><div id="fill-mythic" class="rate-fill mythic-fill"></div></div><div style="width:70px;text-align:right" id="mythicPityLabel"></div></div>
          <div class="drop-row"><div class="rate-label">Secret</div><div class="rate-bar"><div id="fill-secret" class="rate-fill secret-fill"></div></div><div style="width:70px;text-align:right" id="secretPityLabel"></div></div>
          <div style="margin-top:12px" id="dropRatesText" class="small-muted"></div>
        </div>

        <!-- Stats / Dev -->
        <div id="devTab" class="tab-pane" style="display:none">
          <h4 style="margin-top:0">Quick Stats</h4>
          <div id="stats">Pulls: 0 ¬∑ Pity(M): 0 ¬∑ Pity(S): 0 ¬∑ Extra Rolls: 0</div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <h4>Top Inventory</h4>
          <div id="quickInv">(empty)</div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <label style="display:flex;gap:8px;align-items:center;margin-top:8px"><input id="devEnableCheckbox" type="checkbox"/> Enable Developer Mode (shows Dev Gear)</label>
          <div id="devControls" style="display:none;margin-top:8px">
            <div style="display:flex;gap:8px;margin-bottom:8px">
              <select id="giveFoodSelect" style="flex:1"></select>
              <button class="btn" id="giveFoodBtn">‚ûï</button>
            </div>
            <div style="display:flex;gap:8px;margin-bottom:8px">
              <select id="giveComboSelect" style="flex:1"></select>
              <button class="btn" id="giveComboBtn">‚ûï Combo</button>
            </div>

            <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px;margin-top:8px">
              <button class="btn" id="forceCommon">Force Common</button>
              <button class="btn" id="forceLegendary">Force Legendary</button>
              <button class="btn" id="forceMythic">Force Mythic</button>
              <button class="btn" id="forceSecret">Force Secret</button>
            </div>

            <div style="display:flex;gap:8px;margin-top:8px;align-items:center">
              <input id="multiN" type="number" placeholder="N" style="width:80px;padding:8px;border-radius:8px;background:transparent;border:1px solid var(--accent);color:var(--fg)"/>
              <button class="btn" id="multiRun">Multi N (dev)</button>
              <button class="btn" id="revealRecipes">Reveal Recipes</button>
            </div>
            <div style="margin-top:8px;display:grid;grid-template-columns:1fr 1fr;gap:8px">
              <button class="btn" id="devReset">Reset (Dev)</button>
              <button class="btn" id="wipeDataSmall">Wipe Save</button>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<canvas id="confetti"></canvas>

<!-- settings drawer -->
<div id="settingsDrawer" class="card" aria-hidden="true" style="display:none;position:fixed;left:14px;bottom:14px;width:360px;background:var(--card-bg);border-radius:12px;padding:12px;border:2px solid var(--accent);z-index:10001">
  <strong style="color:#fff">Settings</strong>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Background Mode</label>
    <div style="display:flex;gap:8px;color:#fff">
      <label><input type="radio" name="bgMode" value="floating" checked/> Floating Foods</label>
      <label><input type="radio" name="bgMode" value="aeroBlue"/> Aero Blue</label>
      <label><input type="radio" name="bgMode" value="aeroGreen"/> Aero Green</label>
      <label><input type="radio" name="bgMode" value="purpleAero"/> Purple Aero</label>
    </div>
    <div class="small-muted" style="color:#fff;font-size:12px;margin-top:6px">(Floating Foods picks random emojis each run)</div>
  </div>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Background Opacity</label>
    <input id="bgOpacity" class="range" type="range" min="0" max="0.9" step="0.01" value="0.10"/>
    <div class="small-muted" style="color:#fff">Overlay darkness above solid black (0 = no overlay).</div>
  </div>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Clock Format</label>
    <div style="display:flex;gap:8px;color:#fff">
      <label><input type="radio" name="clockFmt" value="12" checked/> 12h</label>
      <label><input type="radio" name="clockFmt" value="24"/> 24h</label>
    </div>
  </div>

  <div style="margin-top:8px;display:flex;gap:8px">
    <button class="btn" id="closeSettings">Close</button>
    <button class="btn" id="exportSave">‚¨áÔ∏è Export Save</button>
    <button class="btn" id="importSave">‚¨ÜÔ∏è Import Save</button>
  </div>

  <div style="margin-top:8px">
    <button class="btn" id="wipeData">‚ö†Ô∏è Wipe All Game Data</button>
    <div class="small-muted" style="color:#fff">Use if you want a completely fresh start.</div>
  </div>
</div>

<!-- dev gear floating button -->
<div id="devGear" title="Dev Tools" style="display:none;position:fixed;right:14px;bottom:84px;width:56px;height:56px;border-radius:28px;background:var(--accent);color:var(--bg);display:flex;align-items:center;justify-content:center;z-index:10002;box-shadow:0 6px 18px rgba(0,0,0,0.4);cursor:pointer;">‚öôÔ∏è</div>

<!-- live clock -->
<div id="liveClock" style="position:fixed;right:16px;bottom:14px;padding:8px 12px;border-radius:10px;background:var(--card-bg);border:2px solid var(--accent);z-index:9998;font-weight:800">‚Äî</div>

<script>
/* ============================
   DATA: ~200 foods, combos, achievements
   ============================ */
const ITEMS = (()=>{
  // We'll create numbered names "#001 Apple" etc for clarity.
  const list = [
    // A big curated list of real foods (200+). Each entry: {name, emoji, rarity}
    // Most are Common/Uncommon; Rare/Legendary/Secret/Mythic are few.
    // (I grouped many common fruits/foods)
    "Apple|üçé|Common","Banana|üçå|Common","Orange|üçä|Common","Pear|üçê|Common","Grapes|üçá|Common",
    "Strawberry|üçì|Common","Blueberry|ü´ê|Common","Cherry|üçí|Common","Lemon|üçã|Common","Lime|üü¢|Common",
    "Peach|üçë|Common","Plum|üçë|Common","Watermelon|üçâ|Common","Pineapple|üçç|Common","Mango|ü•≠|Common",
    "Kiwi|ü•ù|Common","Apricot|üçë|Common","Fig|üçà|Common","Coconut|ü••|Common","Papaya|üü†|Common",
    "Melon|üçà|Common","Pomegranate|ü•≠|Uncommon","Guava|üü†|Uncommon","Nectarine|üçë|Uncommon","Blackberry|ü´ê|Uncommon",
    "Raspberry|üçì|Uncommon","Cantaloupe|üçà|Uncommon","Honeydew|üçà|Uncommon","Dragonfruit|üêâ|Uncommon","Tomato|üçÖ|Uncommon",
    "Avocado|ü•ë|Uncommon","Olives|ü´í|Uncommon","Mango Slice|ü•≠|Uncommon","Persimmon|üçä|Uncommon","Jackfruit|üçà|Uncommon",
    "Durian|üü†|Uncommon","Starfruit|‚≠ê|Uncommon","Lychee|üßã|Uncommon","Passionfruit|üü£|Uncommon","Kumquat|üü†|Uncommon",
    "Bread|üçû|Common","Toast|üçû|Common","Bagel|ü•Ø|Common","Croissant|ü•ê|Common","Muffin|üßÅ|Common",
    "Pancakes|ü•û|Legendary","Waffles|üßá|Uncommon","French Toast|üçû|Common","Donut|üç©|Secret","Chocolate Cake|üç∞|Secret",
    "Brownie|üç´|Common","Cookie|üç™|Common","Ice Cream|üç®|Secret","Sundae|üç®|Secret","Gelato|üçß|Rare",
    "Yogurt|ü•£|Rare","Cheese|üßÄ|Rare","Butter|üßà|Common","Cream|ü•õ|Common","Custard|üçÆ|Rare",
    "Rice|üçö|Common","Fried Rice|üçö|Uncommon","Sushi|üç£|Uncommon","Onigiri|üçô|Uncommon","Noodles|üçú|Common",
    "Ramen|üçú|Uncommon","Udon|üçú|Common","Soba|üçú|Common","Pasta|üçù|Common","Spaghetti|üçù|Uncommon",
    "Lasagna|üçù|Uncommon","Pizza Slice|üçï|Uncommon","Calzone|ü•ü|Uncommon","Burger|üçî|Common","Cheeseburger|üçî|Rare",
    "Hot Dog|üå≠|Common","Taco|üåÆ|Uncommon","Burrito|üåØ|Common","Nachos|üßÄ|Uncommon","Quesadilla|üßÄ|Uncommon",
    "Fried Chicken|üçó|Common","Chicken Breast|üçó|Common","Kebab|üç¢|Common","Steak|ü•©|Rare","Meatball|üçñ|Uncommon",
    "Sausage|üå≠|Common","Bacon|ü•ì|Common","Ham|üçñ|Common","Salami|üßÄ|Common","Fish|üêü|Common",
    "Grilled Fish|üêü|Uncommon","Shrimp|üç§|Uncommon","Crab|ü¶Ä|Uncommon","Lobster|ü¶û|Rare","Clams|üêö|Uncommon",
    "Oysters|ü¶™|Rare","Scallops|ü¶™|Rare","Corn|üåΩ|Common","Boiled Corn|üåΩ|Common","Popcorn|üçø|Legendary",
    "Potato|ü•î|Common","French Fry|üçü|Legendary","Mashed Potato|ü•î|Common","Baked Potato|ü•î|Common","Tater Tots|üçü|Common",
    "Egg|ü•ö|Common","Fried Egg|üç≥|Rare","Omelette|üç≥|Common","Quiche|ü•ß|Rare","Porridge|ü•£|Common",
    "Oatmeal|ü•£|Common","Granola|ü•£|Common","Cereal|ü•£|Common","Honey|üçØ|Common","Jam|üçá|Common",
    "Peanut Butter|ü•ú|Common","Almonds|üå∞|Common","Walnuts|üå∞|Common","Pistachio|ü•ú|Rare","Cashews|ü•ú|Common",
    "Tofu|üç±|Common","Edamame|üü¢|Common","Tempeh|üü§|Common","Miso Soup|üçú|Common","Seaweed|üü©|Common",
    "Salad|ü•ó|Common","Caesar Salad|ü•ó|Uncommon","Greek Salad|ü•ó|Uncommon","Coleslaw|ü•ó|Common","Kimchi|üå∂Ô∏è|Uncommon",
    "Pickles|ü•í|Common","Salsa|üå∂Ô∏è|Uncommon","Guacamole|ü•ë|Uncommon","Hummus|ü•ô|Common","Falafel|üßÜ|Uncommon",
    "Stew|üç≤|Common","Curry|üçõ|Uncommon","Rice & Curry|üçõ|Uncommon","Biryani|üçö|Uncommon","Dumplings|ü•ü|Uncommon",
    "Bao|ü•ü|Uncommon","Porridge Savory|üç≤|Common","Crepe|ü•û|Common","Cr√™pe Sweet|ü•û|Common","Creme Brulee|üçÆ|Secret",
    "Tart|ü•ß|Rare","Pie|ü•ß|Common","Pumpkin Pie|ü•ß|Legendary","Apple Pie|ü•ß|Uncommon","Pecan Pie|ü•ß|Uncommon",
    "Scone|üç™|Common","Bag of Chips|üçü|Common","Pretzel|ü•®|Common","Garlic Bread|üçû|Common","Bruschetta|üçû|Uncommon",
    "Tapas|üçΩÔ∏è|Uncommon","Charcuterie|üßÄ|Uncommon","Wine|üç∑|Uncommon","Champagne|ü•Ç|Rare","Cocktail|üç∏|Uncommon",
    "Smoothie|ü•§|Uncommon","Milkshake|ü•§|Uncommon","Coffee|‚òï|Common","Espresso|‚òï|Common","Tea|üçµ|Common",
    "Latte|‚òï|Common","Matcha|üçµ|Uncommon","Chai|üçµ|Uncommon","Sake|üç∂|Uncommon","Beer|üç∫|Common",
    "Sausage Roll|ü•ê|Common","Empanada|ü•ü|Uncommon","Calamari|ü¶ë|Uncommon","Ratatouille|üç≤|Uncommon","Gnocchi|üçù|Uncommon",
    "Souvlaki|üç¢|Uncommon","Poke Bowl|ü•ó|Uncommon","Ceviche|üêü|Rare","Paella|üçö|Rare","Gumbo|üç≤|Uncommon",
    "Jambalaya|üç≤|Uncommon","Okonomiyaki|ü•û|Uncommon","Takoyaki|ü¶ë|Uncommon","Bibimbap|üçö|Uncommon","Kimchi Stew|üå∂Ô∏è|Uncommon",
    "Shawarma|ü•ô|Common","Gyro|ü•ô|Common","Poutine|üçü|Uncommon","Cottage Pie|ü•ß|Uncommon","Cornbread|üçû|Common",
    "Sausage & Mash|ü•ì|Common","Toffee|üç¨|Common","Nougat|üç¨|Secret","Marshmallow|üç°|Common","Toffee Apple|üçé|Uncommon",
    "Chocolate Truffle|üç´|Legendary","Golden Truffle|üçÑ|Legendary","Mystic Macaron|üßÅ|Secret","Celestial Sorbet|üçß|Mythic",
    "ULTRA Slushie|üßä|Secret","GOLDEN Nugget|ü™ô|Mythic","Secret Saffron Rice|üçö|Secret","Phantom Pudding|üçÆ|Secret",
    "Cosmic Creme Brulee|üçÆ|Secret","Royal Curry|üçõ|Mythic","Dragonfruit Tart|üêâ|Legendary","Arcane Dessert Duo|üîÆ|Secret",
    "Enchanted Eclair|ü•ê|Secret","Divine Doughnut|üç©|Secret","Frosted Freeze|‚ùÑÔ∏è|Secret","Forbidden Dessert|üç©|Secret",
    "Royal Pastry|‚ú®|Secret","Choco-Pancake Stack|üßÅ|Uncommon","Frosty Fry|üçü|Uncommon","Happy Meal|üéÅ|Uncommon",
    // Add filler common world cuisines and snacks until ~200
    "Tostada|üåÆ|Common","Samosa|ü•ü|Common","Momos|ü•ü|Common","Pav Bhaji|üçõ|Uncommon","Dosa|ü•û|Uncommon",
    "Idli|üçö|Common","Vada|üç©|Common","Kebab Skewer|üç¢|Common","Banh Mi|ü•ñ|Uncommon","Pho|üçú|Uncommon",
    "Congee|üçö|Common","Tamale|üåΩ|Common","Arepa|üåΩ|Common","Empanada Beef|ü•ü|Uncommon","Chili|üå∂Ô∏è|Common",
    "Haggis|üçΩÔ∏è|Rare","Pierogi|ü•ü|Uncommon","Goulash|üç≤|Uncommon","Katsu|üç±|Uncommon","Okra|ü•¨|Common",
    "Beetroot Salad|ü•ó|Common","Rye Bread|üçû|Common","Sourdough|üçû|Common","Ciabatta|üçû|Common","Focaccia|üçû|Common",
    "Truffle Risotto|üçö|Legendary","Baklava|üç∞|Uncommon","Kunafa|üç∞|Uncommon","Mooncake|ü•Æ|Uncommon","Sichuan Noodles|üçú|Uncommon",
    "Mapo Tofu|üç≤|Uncommon","Carbonara|üçù|Uncommon","Bolognese|üçù|Uncommon","Tiramisu|‚òï|Rare","Panna Cotta|üçÆ|Rare",
    "Gelatin|üçÆ|Common","Lollipop|üç≠|Common","Sushi Roll|üç£|Uncommon","Nigiri|üç£|Uncommon","Maki|üç£|Uncommon",
    "Tempura|üç§|Uncommon","Okra Curry|üçõ|Common","Sesame Ball|üç°|Common","Moonshine|ü•É|Rare","Coconut Rice|üçö|Common",
    "Mango Sticky Rice|ü•≠|Uncommon","Coconut Curry|ü••|Uncommon","Thai Green Curry|üçõ|Rare","Pad Thai|üçú|Uncommon",
    "Laksa|üçú|Uncommon","Malai Kofta|üçõ|Uncommon","Chaat|ü•™|Common","Bhel Puri|üçö|Common","Pavlova|üç∞|Rare",
    "Custard Tart|ü•ß|Uncommon","Corn Pudding|üåΩ|Common","Brown Butter|üßà|Common","Clarified Butter|üßà|Common","Ghee|üßà|Common"
  ];
  // Expand to numbered entries and parse tokens
  const items = [];
  for(let i=0;i<list.length;i++){
    const [name,emoji,rarity] = list[i].split('|');
    const num = String(i+1).padStart(3,'0');
    items.push({ id: num, name: `${num} ${name}`, emoji: emoji||'üçΩÔ∏è', rarity: rarity||'Common' });
  }
  return items;
})();

/* tuned base rarity weights for common/uncommon/rare/legendary (used when special checks fail) */
const RARITY_BASE = { Common:1.0, Uncommon:0.45, Rare:0.08, Legendary:0.012 };

/* Mythic & Secret absolute odds (as requested) */
const ABS_ODDS = {
  mythic: 1/9000,   // ~0.000111...
  secret: 1/10000   // 0.0001
};
/* mythic pity and secret pity thresholds */
const PITY = { mythic: 9000, secret: 10000 };

/* build per-rarity counts */
const BY_RARITY = {};
ITEMS.forEach(it => BY_RARITY[it.rarity] = (BY_RARITY[it.rarity]||0)+1);

/* names & helper weights for fallback pick */
const ITEM_NAMES = ITEMS.map(i=>i.name);

/* ============================
   combos (20) + descriptions
   ============================ */
const COMBOS = [
  {req:["001 Apple","050 Chocolate Cake"], result:"Caramel Apple", achievement:"üçé Fairground Treat", desc:"A sweet caramel coating for apples."},
  {req:["002 Banana","036 Yogurt","006 Strawberry"], result:"Smoothie Bowl", achievement:"ü•§ Health Nut", desc:"Fruit blend topped with granola."},
  {req:["010 Pineapple","064 Pizza Slice"], result:"Hawaiian Pizza", achievement:"üçç Controversial Pick", desc:"Pineapple with melty cheese."},
  {req:["084 Pancakes","050 Chocolate Cake"], result:"Choco-Pancake Stack", achievement:"üßÅ Sweet Stack", desc:"Pancakes layered with cake."},
  {req:["069 French Fry","127 ULTRA Slushie"], result:"Frosty Fry", achievement:"‚ùÑÔ∏è Chill Snack", desc:"Cold slushie + hot fries."},
  {req:["020 Mango","002 Banana","056 Coconut"], result:"Tropical Medley", achievement:"üå¥ Island Hopper", desc:"A fruity island dessert."},
  {req:["033 Cheese","001 Apple"], result:"Apple & Cheese Plate", achievement:"üßÄ Sophisticated Snack", desc:"Cheese and apple pairing."},
  {req:["053 Rice","143 Golden Truffle"], result:"Truffle Risotto", achievement:"üíé Haute Cuisine", desc:"Luxury mushroom truffle risotto."},
  {req:["012 Pear","011 Grapes"], result:"Fruit Platter", achievement:"üçΩ Platter Pro", desc:"A simple fruit assortment."},
  {req:["040 Pancakes","052 Honey"], result:"Honey Pancakes", achievement:"üçØ Sweet Morning", desc:"Fluffy pancakes drizzled with honey."},
  {req:["150 ULTRA Slushie","069 French Fry"], result:"Slush & Fry Combo", achievement:"üçü Slushy Combo", desc:"Fast food fusion."},
  {req:["121 Donut","050 Chocolate Cake"], result:"Frosted Choco Donut", achievement:"üç© Centrifuge", desc:"Donut and cake collide."},
  {req:["028 Garlic Bread","025 Tomato"], result:"Bruschetta", achievement:"üçû Italian Starter", desc:"Toasted bread with tomato & garlic."},
  {req:["072 Sushi","033 Cheese"], result:"Spicy Cheese Roll", achievement:"üç£ Fusion Roll", desc:"Unexpected savory roll."},
  {req:["045 Fried Rice","143 Golden Truffle"], result:"Truffle Rice", achievement:"üíé Rich Rice", desc:"Truffle fragrance in rice."},
  {req:["139 DIVINE DOUGHNUT","121 Donut"], result:"Divine Stack", achievement:"‚ú® Pastry Prince", desc:"A stack of divine pastries."},
  {req:["033 Cheese","005 Bread"], result:"Cheese Toast", achievement:"üßÄ Toasty Bite", desc:"Classic cheesy toast."},
  {req:["020 Mango","010 Pineapple"], result:"Mango Pine Parfait", achievement:"ü•≠ Sunny Parfait", desc:"Layered tropical parfait."},
  {req:["144 Celestial Sorbet","043 Ice Cream"], result:"Astral Sundae", achievement:"üåå Starlit Chef", desc:"Sundae with cosmic sorbet."},
  {req:["133 Golden Truffle","143 Golden Truffle"], result:"Double Truffle", achievement:"üíé Truffle Overload", desc:"Two truffles make magic."}
];

/* ============================
   achievements (20+) with checks
   ============================ */
const ACHIEVEMENTS = [
  {id:"collect10", title:"Fruit Collector I", desc:"Collect 10 different foods", check:(s)=> s.foodDex.size>=10, reward:{extraRolls:0}},
  {id:"collect25", title:"Fruit Collector II", desc:"Collect 25 different foods", check:(s)=> s.foodDex.size>=25, reward:{extraRolls:1}},
  {id:"collect50", title:"Collector", desc:"Collect 50 different foods", check:(s)=> s.foodDex.size>=50, reward:{extraRolls:2}},
  {id:"rare3", title:"üç≥ Rare Collector", desc:"Collect 3 rare items", check:(s)=> ITEMS.filter(i=>i.rarity==='Rare').map(i=>i.name).filter(n=> s.foodDex.has(n)).length>=3, reward:{}},
  {id:"legendary1", title:"üåü Legendary Find", desc:"Pull any Legendary item", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Legendary')), reward:{extraRolls:1}},
  {id:"secret1", title:"‚ú® Secret Seeker", desc:"Find any Secret item", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Secret')), reward:{}},
  {id:"mythic1", title:"üåå Mythic Hunter", desc:"Obtain a Mythic item", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Mythic')), reward:{extraRolls:2}},
  {id:"combo1", title:"üß© Combo Starter", desc:"Complete 1 combo", check:(s)=> s.completedCombos.size>=1, reward:{}},
  {id:"combo5", title:"üß© Combo Apprentice", desc:"Complete 5 combos", check:(s)=> s.completedCombos.size>=5, reward:{extraRolls:1}},
  {id:"golden_bg", title:"üëë Golden Unlock", desc:"Obtain GOLDEN Nugget to unlock Gold background", check:(s)=> [...s.foodDex].some(n=> n.includes("GOLDEN Nugget")), reward:{}},
  {id:"dexMaster", title:"üçΩ Master Chef", desc:"Collect all foods & combos", check:(s)=>{
    const totalFoods = ITEMS.length + COMBOS.length;
    const known = s.foodDex.size + s.completedCombos.size;
    return known>=totalFoods;
  }, reward:{extraRolls:5}},
  // More filler achievements...
  {id:"snacklover", title:"üçø Snack Lover", desc:"Collect 20 snack items", check:(s)=> s.foodDex.size>=20, reward:{}},
  {id:"baker", title:"ü•ê Baker", desc:"Collect 8 bakery items", check:(s)=> ITEMS.filter(i=> i.name.toLowerCase().includes('cake') || i.name.toLowerCase().includes('donut') || i.name.toLowerCase().includes('pancake')).filter(i=> s.foodDex.has(i.name)).length>=1, reward:{}},
  {id:"global", title:"üåç World Taster", desc:"Collect foods from 10 different cuisines", check:(s)=> s.foodDex.size>=30, reward:{}},
  {id:"firstPull", title:"üéâ First Pull", desc:"Make your first pull", check:(s)=> s.pulls>=1, reward:{extraRolls:0}},
  {id:"historyCollector", title:"üïò Historian", desc:"Keep 100 items in history", check:(s)=> s.history.length>=100, reward:{}},
  {id:"lucky100", title:"üçÄ Lucky Hundred", desc:"Make 100 pulls", check:(s)=> s.pulls>=100, reward:{extraRolls:2}},
  {id:"devUnlocked", title:"üõ†Ô∏è Dev Friend", desc:"Enable Dev Mode", check:(s)=> s.devEnabled, reward:{}}
];

/* ============================
   state & persistence
   ============================ */
const STORAGE_KEY = "ultimate_food_game_all_in_one_final_v1";
let state = {
  inventory: {},
  foodDex: new Set(),
  achievements: new Set(),
  completedCombos: new Set(),
  pulls: 0,
  pityMythic: 0,
  pitySecret: 0,
  extraRolls: 0,
  history: [],
  firstObtainedAt: {}, // name -> timestamp
  devEnabled: false,
  goldenUnlocked: false
};
let speedMode = false;
let clock24 = false;

/* load/save */
function saveState(){
  const obj = {
    inventory: state.inventory,
    foodDex: [...state.foodDex],
    achievements: [...state.achievements],
    completedCombos: [...state.completedCombos],
    pulls: state.pulls,
    pityMythic: state.pityMythic,
    pitySecret: state.pitySecret,
    extraRolls: state.extraRolls,
    history: state.history,
    firstObtainedAt: state.firstObtainedAt,
    devEnabled: state.devEnabled,
    goldenUnlocked: state.goldenUnlocked
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(obj));
  localStorage.setItem('dev_mode_enabled_final', state.devEnabled? '1':'0');
  localStorage.setItem('clock_format_24_final', clock24? '1':'0');
  document.getElementById('bgOpacity') && document.getElementById('bgOpacity').dispatchEvent(new Event('input'));
}
function loadState(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(raw){
      const p = JSON.parse(raw);
      state.inventory = p.inventory || {};
      state.foodDex = new Set(p.foodDex || []);
      state.achievements = new Set(p.achievements || []);
      state.completedCombos = new Set(p.completedCombos || []);
      state.pulls = p.pulls || 0;
      state.pityMythic = p.pityMythic || 0;
      state.pitySecret = p.pitySecret || 0;
      state.extraRolls = p.extraRolls || 0;
      state.history = p.history || [];
      state.firstObtainedAt = p.firstObtainedAt || {};
      state.devEnabled = p.devEnabled || false;
      state.goldenUnlocked = p.goldenUnlocked || false;
    }
    // persist dev flag
    const dv = localStorage.getItem('dev_mode_enabled_final')==='1';
    state.devEnabled = state.devEnabled || dv;
    clock24 = localStorage.getItem('clock_format_24_final') === '1';
    document.getElementById('devEnableCheckbox') && (document.getElementById('devEnableCheckbox').checked = state.devEnabled);
    document.getElementById('devControls') && (document.getElementById('devControls').style.display = state.devEnabled ? 'block':'none');
  }catch(e){ console.error(e); }
}

/* ============================
   helpers: find, time, weighted fallback
   ============================ */
function findItem(name){ return ITEMS.find(i=>i.name===name) || null; }
function nowISO(){ return (new Date()).toISOString(); }
function formatTime(fmt24){
  const d = new Date();
  if(fmt24){
    const hh = String(d.getHours()).padStart(2,'0'), mm=String(d.getMinutes()).padStart(2,'0'), ss=String(d.getSeconds()).padStart(2,'0');
    return `${hh}:${mm}:${ss}`;
  } else {
    let h = d.getHours();
    const am = h < 12;
    h = h % 12 || 12;
    const hh = String(h), mm=String(d.getMinutes()).padStart(2,'0'), ss=String(d.getSeconds()).padStart(2,'0');
    return `${hh}:${mm}:${ss} ${am? 'AM':'PM'}`;
  }
}
/* fallback weighted pick among non-mythic/non-secret using RARITY_BASE */
function weightedFallbackPick(){
  // build pool: Common/Uncommon/Rare/Legendary
  let pool = [];
  ITEMS.forEach(it=>{
    if(it.rarity==='Mythic' || it.rarity==='Secret') return;
    const base = RARITY_BASE[it.rarity] || 0.1;
    // to keep reasonable distribution, push each item proportional times (but avoid huge arrays)
    const weight = Math.max(1, Math.round(base*100));
    pool.push({name:it.name, w: weight});
  });
  // do weighted selection
  const total = pool.reduce((s,p)=>s+p.w,0);
  let r = Math.random()*total;
  for(const p of pool){
    r -= p.w;
    if(r<=0) return p.name;
  }
  return pool[0].name;
}

/* ============================
   pity and pick logic:
   - Secret rarer than Mythic
   - secret pity = 10000; mythic pity = 9000
   - exact absolute odds: check absolute small chance each roll first
   ============================ */
function pickWithPity(){
  // Check secret pity first (highest)
  if(state.pitySecret >= PITY.secret){
    state.pitySecret = 0;
    state.pityMythic = 0;
    // pick a random Secret
    const pool = ITEMS.filter(it=> it.rarity==='Secret').map(i=>i.name);
    return pool[Math.floor(Math.random()*pool.length)] || weightedFallbackPick();
  }
  // Check mythic pity second
  if(state.pityMythic >= PITY.mythic){
    state.pityMythic = 0;
    // pick random Mythic
    const pool = ITEMS.filter(it=> it.rarity==='Mythic').map(i=>i.name);
    return pool[Math.floor(Math.random()*pool.length)] || weightedFallbackPick();
  }

  // Random absolute check: secret first (rarer)
  const r = Math.random();
  if(r < ABS_ODDS.secret){
    // secret found
    return ITEMS.filter(it=> it.rarity==='Secret')[Math.floor(Math.random()*BY_RARITY['Secret'])].name;
  }
  // then mythic
  if(r < ABS_ODDS.mythic + ABS_ODDS.secret){
    return ITEMS.filter(it=> it.rarity==='Mythic')[Math.floor(Math.random()*BY_RARITY['Mythic'])].name;
  }

  // else fallback weighted among common/uncommon/rare/legendary
  return weightedFallbackPick();
}

/* ============================
   roll logic
   ============================ */
function rollOnce(){
  state.pulls++;
  // increment pity counters (until we hit)
  state.pityMythic++;
  state.pitySecret++;

  const pickedName = pickWithPity();
  const item = findItem(pickedName) || {name:pickedName, emoji:'üß©', rarity:'Combo'}; // combo results or bakery
  // reset counters depending on rarity
  if(item.rarity === 'Secret'){
    state.pitySecret = 0;
    state.pityMythic = Math.max(0, state.pityMythic - 50); // slight mitigation but not required
  } else if(item.rarity === 'Mythic'){
    state.pityMythic = 0;
    // secret not reset
  } else {
    // none reset
  }

  // add to inventory
  state.inventory[item.name] = (state.inventory[item.name]||0)+1;
  // record first obtain time if new
  if(!state.firstObtainedAt[item.name]) state.firstObtainedAt[item.name] = nowISO();
  // add to dex
  state.foodDex.add(item.name);
  // history
  state.history.unshift({ts: new Date().toISOString(), name:item.name, rarity:item.rarity, display:`${item.emoji} ${item.name}`});
  if(state.history.length>2000) state.history.pop();

  // result UI
  setResultText(`You Got: ${item.emoji} ${item.name} [${item.rarity}]`);
  playRarityPop(item.rarity);

  // special unlocks
  if(item.name.includes("GOLDEN Nugget") && !state.goldenUnlocked){
    state.goldenUnlocked = true;
    log("üëë GOLDEN Nugget obtained ‚Äî golden background unlocked!");
    triggerGoldenBackground();
  }
  if(item.rarity==='Secret'){ log(`‚ú® SECRET FIND: ${item.emoji} ${item.name} [${item.rarity}]`,'secret'); triggerSecretBackground(); createConfetti(160); }
  else if(item.rarity==='Mythic'){ log(`üåü MYTHIC: ${item.emoji} ${item.name} [${item.rarity}]`,'legendary'); createConfetti(200); }
  else if(item.rarity==='Legendary'){ log(`üåü LEGENDARY: ${item.emoji} ${item.name} [${item.rarity}]`,'legendary'); createConfetti(110); }
  else log(`You got: ${item.emoji} ${item.name} [${item.rarity}]`);

  // combos/achievements
  processCombos();
  runAchievementChecks();

  // extra rolls from quests
  if(state.extraRolls>0){
    state.extraRolls--; log("üéÅ Quest reward: bonus roll!");
    saveState();
    setTimeout(()=>{ rollOnce(); saveState(); renderAll(); }, 160);
    return;
  }

  saveState();
  renderAll();
}

/* multi N, used by dev only */
function rollMultiN(n){
  if(!Number.isFinite(n) || n<=0) return;
  // run N sequentially but don't block UI
  (async ()=>{
    for(let i=0;i<n;i++){
      rollOnce();
      await new Promise(r=>setTimeout(r, 90));
    }
  })();
}

/* ============================
   combos: consume ingredients & create result
   ============================ */
function processCombos(){
  let made = false;
  do{
    made=false;
    for(const combo of COMBOS){
      const ok = combo.req.every(r => (state.inventory[r]||0) >= 1);
      if(ok){
        // consume
        combo.req.forEach(r => { state.inventory[r] -= 1; if(state.inventory[r] <= 0) delete state.inventory[r]; });
        // add result
        state.inventory[combo.result] = (state.inventory[combo.result]||0)+1;
        state.foodDex.add(combo.result);
        state.completedCombos.add(combo.result);
        log(`üß© Combo: ${combo.result} (from ${combo.req.join(' + ')})`);
        createConfetti(90);
        saveState();
        made=true; break;
      }
    }
  }while(made);
}

/* ============================
   achievements
   ============================ */
function runAchievementChecks(){
  ACHIEVEMENTS.forEach(a=>{
    if(a.check && a.check(state) && !state.achievements.has(a.title)){
      state.achievements.add(a.title);
      log(`üèÜ Achievement Unlocked: ${a.title} ‚Äî ${a.desc}`);
      createConfetti(120);
      if(a.reward && a.reward.extraRolls) state.extraRolls += a.reward.extraRolls;
    }
  });
  // combos achievements
  COMBOS.forEach(c=>{
    if(state.completedCombos.has(c.result) && c.achievement && !state.achievements.has(c.achievement)){
      state.achievements.add(c.achievement);
      log(`üèÜ Achievement Unlocked: ${c.achievement} ‚Äî (from combo ${c.result})`);
      createConfetti(100);
    }
  });
  // dynamic: unlock dev friend if dev toggled
  if(state.devEnabled && !state.achievements.has("üõ†Ô∏è Dev Friend")){
    state.achievements.add("üõ†Ô∏è Dev Friend");
    log("üèÜ Achievement Unlocked: üõ†Ô∏è Dev Friend ‚Äî Enabled Dev Mode");
  }
  // golden background achievement
  if(state.goldenUnlocked && !state.achievements.has("üëë Golden Unlock")){
    state.achievements.add("üëë Golden Unlock");
    log("üèÜ Achievement Unlocked: üëë Golden Unlock");
  }
}

/* ============================
   UI: rendering functions
   ============================ */
const logEl = document.getElementById('log');
function log(msg,type){
  const row=document.createElement('div'); row.className='log-row';
  const dot=document.createElement('div'); dot.className='log-dot';
  dot.style.background = type==='secret'?'#ff77ff':(type==='legendary'?'gold':'#fff');
  const txt=document.createElement('div'); txt.innerText = `${formatTime(clock24)} ‚Äî ${msg}`;
  if(type==='secret') txt.classList.add('secret');
  if(type==='legendary') txt.classList.add('legendary');
  row.appendChild(dot); row.appendChild(txt);
  logEl.prepend(row);
  while(logEl.children.length > 400) logEl.removeChild(logEl.lastChild);
}

/* result text */
function setResultText(t){
  const el = document.getElementById('result');
  el.classList.remove('pop');
  void el.offsetWidth; // reflow to restart
  el.innerText = t;
  el.classList.add('pop');
}

/* render foods grid */
function renderFoods(){
  const grid = document.getElementById('foodsGrid');
  grid.innerHTML = '';
  const comboResults = COMBOS.map(c=>c.result);
  const allNames = [...new Set([...ITEM_NAMES, ...comboResults])];
  const sort = document.getElementById('dexSort').value;
  if(sort==='alpha') allNames.sort((a,b)=>a.localeCompare(b));
  else {
    const order = {Common:0,Uncommon:1,Rare:2,Legendary:3,Mythic:4,Secret:5,Combo:6,undefined:7};
    allNames.sort((a,b)=>{
      const ai = findItem(a); const bi = findItem(b);
      const ar = ai? ai.rarity : (comboResults.includes(a)? 'Combo' : '');
      const br = bi? bi.rarity : (comboResults.includes(b)? 'Combo' : '');
      const oa = state.foodDex.has(a)?0:1;
      const ob = state.foodDex.has(b)?0:1;
      if(oa!==ob) return oa-ob;
      if(order[ar]!==order[br]) return order[ar]-order[br];
      return a.localeCompare(b);
    });
  }

  allNames.forEach(name=>{
    const item = findItem(name);
    const el = document.createElement('div'); el.className='dex-item' + (state.foodDex.has(name)? '' : ' locked');
    const emojiDiv = document.createElement('div'); emojiDiv.className='dex-emoji'; emojiDiv.innerText = item? item.emoji : 'üß©';
    const nameDiv = document.createElement('div'); nameDiv.className='dex-name';
    nameDiv.innerText = (state.foodDex.has(name)? '‚úÖ ':'') + name;
    el.appendChild(emojiDiv); el.appendChild(nameDiv);
    if(item){
      const sub = document.createElement('div'); sub.className='small-muted'; sub.style.fontSize='11px'; sub.innerText = item.rarity;
      el.appendChild(sub);
      // first obtainment timestamp small
      if(state.firstObtainedAt[item.name]){
        const ts = document.createElement('div'); ts.className='small-muted'; ts.style.fontSize='11px'; ts.style.marginTop='6px';
        ts.innerText = `First: ${new Date(state.firstObtainedAt[item.name]).toLocaleString()}`;
        el.appendChild(ts);
      }
    } else {
      // combos show description in title?
    }
    grid.appendChild(el);
  });

  const discovered = state.foodDex.size;
  const total = allNames.length;
  document.getElementById('dexProgress').innerText = `${discovered}/${total}`;
}

/* render achievements */
function renderAchs(){
  const grid = document.getElementById('achGrid');
  grid.innerHTML = '';
  const comboAchs = COMBOS.map(c=>c.achievement).filter(Boolean);
  const core = ACHIEVEMENTS.map(a=>a.title).concat(comboAchs);
  const all = [...new Set(core)];
  const filter = document.getElementById('achFilter').value;
  all.forEach(a=>{
    const unlocked = state.achievements.has(a);
    if(filter==='unlocked' && !unlocked) return;
    if(filter==='locked' && unlocked) return;
    const card = document.createElement('div'); card.className='ach-card' + (unlocked? ' unlocked' : '');
    const ico = document.createElement('div'); ico.style.fontSize='20px'; ico.innerText = unlocked? 'üèÜ':'üîí';
    const t = document.createElement('div'); t.className='ach-title'; t.innerText = a;
    const sub = document.createElement('div'); sub.className='small-muted'; sub.innerText = unlocked? 'Unlocked' : (ACHIEVEMENTS.find(x=>x.title===a)?.desc || 'Locked');
    card.appendChild(ico); card.appendChild(t); card.appendChild(sub);
    grid.appendChild(card);
  });
  const unlocked = all.filter(a=> state.achievements.has(a)).length;
  document.getElementById('achProgress').innerText = `${unlocked}/${all.length}`;
}

/* render combos */
function renderCombos(){
  const list = document.getElementById('combosList'); list.innerHTML='';
  COMBOS.forEach(c=>{
    const card = document.createElement('div'); card.className='combo-card';
    const title = document.createElement('div'); title.className='combo-result'; title.innerText = `${c.result} ${c.achievement? ' ‚Äî ' + c.achievement : ''}`;
    const desc = document.createElement('div'); desc.className='small-muted'; desc.style.marginBottom='6px'; desc.innerText = c.desc || '';
    const reqs = document.createElement('div'); reqs.className='combo-req';
    c.req.forEach(r=> {
      const it = findItem(r);
      const el = document.createElement('div'); el.style.padding='6px'; el.style.borderRadius='6px'; el.style.background='rgba(255,255,255,0.02)';
      el.innerText = (it? it.emoji + ' ' : '') + r + (state.inventory[r]? ` √ó${state.inventory[r]}` : '');
      reqs.appendChild(el);
    });
    const makeBtn = document.createElement('button'); makeBtn.className='btn'; makeBtn.style.marginTop='8px'; makeBtn.innerText = 'Make Combo (consume)';
    makeBtn.addEventListener('click', ()=>{
      const ok = c.req.every(r => (state.inventory[r]||0) >= 1);
      if(!ok){ alert('Missing ingredients'); return; }
      c.req.forEach(r=> { state.inventory[r] -= 1; if(state.inventory[r]<=0) delete state.inventory[r]; });
      state.inventory[c.result] = (state.inventory[c.result]||0)+1;
      state.foodDex.add(c.result); state.completedCombos.add(c.result); log(`üß© Made ${c.result} (combo)`); saveState(); renderAll();
    });
    card.appendChild(title); card.appendChild(desc); card.appendChild(reqs); card.appendChild(makeBtn);
    list.appendChild(card);
  });
}

/* render dev/stats */
function renderQuick(){
  document.getElementById('stats').innerText = `Pulls: ${state.pulls} ¬∑ Pity(M): ${state.pityMythic} ¬∑ Pity(S): ${state.pitySecret} ¬∑ Extra Rolls: ${state.extraRolls}`;
  const inv = Object.entries(state.inventory).sort((a,b)=>b[1]-a[1]).slice(0,12);
  document.getElementById('quickInv').innerHTML = inv.length? inv.map(x=>`${x[1]}√ó ${x[0]}`).join('<br>') : '(empty)';
  document.getElementById('mythicPityLabel').innerText = `pity ${state.pityMythic}/${PITY.mythic}`;
  document.getElementById('secretPityLabel').innerText = `pity ${state.pitySecret}/${PITY.secret}`;
}

/* render drop rates visual fills (approx animation) */
function renderDropRates(){
  // approximate proportions (for visual only): Common & Uncommon dominate
  // We'll set values visually: Common 70%, Uncommon 20%, Rare 7.9%, Legendary 1%, Mythic 0.011%, Secret 0.01%
  const values = {
    common:70, uncommon:20, rare:7.9, legendary:1, mythic:0.011, secret:0.01
  };
  document.getElementById('fill-common').style.width = values.common + '%';
  document.getElementById('fill-uncommon').style.width = values.uncommon + '%';
  document.getElementById('fill-rare').style.width = values.rare + '%';
  document.getElementById('fill-legendary').style.width = values.legendary + '%';
  // mythic and secret tiny fills; animate to small fixed pixels
  document.getElementById('fill-mythic').style.width = (values.mythic*100) + '%';
  document.getElementById('fill-secret').style.width = (values.secret*100) + '%';
  document.getElementById('dropRatesText').innerText = `Absolute odds (approx): Mythic ‚âà 1/${Math.round(1/ABS_ODDS.mythic)}, Secret ‚âà 1/${Math.round(1/ABS_ODDS.secret)}. Pity: Mythic ${PITY.mythic} pulls, Secret ${PITY.secret} pulls.`;
}

/* render everything */
function renderAll(){
  renderFoods(); renderAchs(); renderCombos(); renderQuick(); renderDropRates();
}

/* ============================
   confetti canvas
   ============================ */
const confCanvas = document.getElementById('confetti');
const confCtx = confCanvas.getContext && confCanvas.getContext('2d');
function resizeCanvas(){ if(confCanvas){ confCanvas.width = window.innerWidth; confCanvas.height = window.innerHeight; } }
window.addEventListener('resize', resizeCanvas); resizeCanvas();
function createConfetti(count=80){
  if(!confCtx) return;
  const pieces = [];
  for(let i=0;i<count;i++){
    pieces.push({
      x: Math.random()*confCanvas.width,
      y: Math.random()*-confCanvas.height,
      r: Math.random()*6+3,
      d: Math.random()*100,
      tilt: Math.random()*10-10,
      color: `hsl(${Math.random()*360} 80% 60%)`,
      tiltInc: Math.random()*0.06+0.03
    });
  }
  let t0 = null;
  const run = (t)=>{
    if(!t0) t0 = t;
    const dt = t - t0;
    confCtx.clearRect(0,0,confCanvas.width, confCanvas.height);
    pieces.forEach(p=>{
      confCtx.beginPath();
      confCtx.lineWidth = p.r/2;
      confCtx.strokeStyle = p.color;
      confCtx.moveTo(p.x+p.tilt, p.y);
      confCtx.lineTo(p.x+p.tilt+p.r/2, p.y+p.tilt+p.r/2);
      confCtx.stroke();
      p.tilt += p.tiltInc;
      p.y += (Math.cos(p.d)+3+p.r/2)/2;
      p.x += Math.sin(p.d);
      if(p.y > confCanvas.height) p.y = -10;
    });
    if(dt < 3500) requestAnimationFrame(run);
    else confCtx.clearRect(0,0,confCanvas.width, confCanvas.height);
  };
  requestAnimationFrame(run);
}

/* ============================
   background themes & floating/bubbles
   ============================ */
let bgMode = 'floating';
let floatTimer, bubbleTimer;

function clearFloatArea(){
  document.getElementById('floatArea').innerHTML = '';
  clearInterval(floatTimer); clearInterval(bubbleTimer);
  document.body.classList.remove('gold-bg');
  const goldEl = document.querySelector('.gold-glitter');
  if(goldEl) goldEl.remove();
  // remove special secret background class if present
  document.body.classList.remove('secret-bg');
}

function setBackgroundMode(mode){
  clearFloatArea();
  bgMode = mode;
  document.documentElement.style.setProperty('--bg-overlay', document.getElementById('bgOpacity').value || 0.10);
  if(mode === 'floating'){
    startFloatingFoods();
  } else if(mode === 'aeroBlue'){
    startAeroBlue();
  } else if(mode === 'aeroGreen'){
    startAeroGreen();
  } else if(mode === 'purpleAero'){
    startPurpleAero();
  }
}

function startFloatingFoods(){
  const area = document.getElementById('floatArea');
  const emojis = ITEMS.map(i=>i.emoji).filter(Boolean);
  const spawn = ()=>{
    const el = document.createElement('div');
    el.className='float-emoji';
    el.innerText = emojis[Math.floor(Math.random()*emojis.length)];
    const left = Math.random()*100;
    const top = (Math.random()*60 - 10);
    el.style.left = left + '%';
    el.style.top = top + '%';
    el.style.fontSize = (12 + Math.random()*34) + 'px';
    el.style.opacity = (0.5 + Math.random()*0.5);
    area.appendChild(el);
    // animate down and rotate
    setTimeout(()=> {
      const dx = (Math.random()*200 - 100);
      el.style.transform = `translate(${dx}px, ${window.innerHeight + 200}px) rotate(${Math.random()*360}deg)`;
      el.style.opacity = 0.9;
    }, 80 + Math.random()*600);
    setTimeout(()=> el.remove(), 10000 + Math.random()*10000);
  };
  // initial burst
  for(let i=0;i<20;i++) spawn();
  floatTimer = setInterval(spawn, 900);
}

function startAeroBlue(){
  const area = document.getElementById('floatArea');
  // blue gradient background overlay effect
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#021024,#00142a)');
  // bubbles
  const spawnBubble = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 10 + Math.random()*90;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(255,255,255,0.12), rgba(255,255,255,0.03))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnBubble();
  bubbleTimer = setInterval(spawnBubble, 1200);
}

function startAeroGreen(){
  const area = document.getElementById('floatArea');
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#05200a,#021006)');
  // leaves-like bubbles
  const spawnLeaf = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 8 + Math.random()*60;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(150,255,200,0.12), rgba(255,255,255,0.02))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnLeaf();
  bubbleTimer = setInterval(spawnLeaf, 1000);
}

function startPurpleAero(){
  const area = document.getElementById('floatArea');
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#20012b,#100016)');
  const spawnPurple = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 12 + Math.random()*80;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(200,140,255,0.14), rgba(255,255,255,0.02))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnPurple();
  bubbleTimer = setInterval(spawnPurple, 900);
}

/* golden background trigger */
function triggerGoldenBackground(){
  document.body.classList.add('gold-bg');
  // add glitter layer
  const g = document.createElement('div'); g.className='gold-glitter';
  g.innerHTML = `<svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
    <defs><linearGradient id="g" x1="0" x2="1"><stop offset="0" stop-color="#ffd27f"/><stop offset="1" stop-color="#ffefc0"/></linearGradient></defs>
    <rect x="0" y="0" width="100" height="100" fill="url(#g)" opacity="0.06"></rect>
  </svg>`;
  document.body.appendChild(g);
  // golden falling small circles
  const area = document.getElementById('floatArea');
  for(let i=0;i<60;i++){
    const p = document.createElement('div'); p.style.position='absolute'; p.style.left = Math.random()*100 + 'vw'; p.style.top = (-20 - Math.random()*60) + 'vh';
    p.style.width = p.style.height = (4 + Math.random()*8) + 'px'; p.style.borderRadius='50%'; p.style.background = 'linear-gradient(180deg,#ffd27f,#ffefc0)'; p.style.opacity = 0.9; p.style.transform = `translateY(0)`;
    area.appendChild(p);
    const dur = 4000 + Math.random()*6000;
    p.animate([{transform:'translateY(0)', opacity:1},{transform:`translateY(${window.innerHeight + 200}px)`, opacity:0}],{duration:dur, easing:'linear'});
    setTimeout(()=> p.remove(), 8000 + Math.random()*8000);
  }
}

/* secret background trigger */
function triggerSecretBackground(){
  // subtle purple-pink aurora, plus confetti
  document.body.style.background = 'linear-gradient(180deg,#0b0010,#140018)';
  setTimeout(()=> {
    document.body.style.background = 'var(--bg)';
  }, 9000);
}

/* ============================
   sound/visual pop (we'll avoid music)
   ============================ */
function playRarityPop(rarity){
  const el = document.getElementById('result');
  el.classList.add('pop');
  setTimeout(()=> el.classList.remove('pop'), 600);
}

/* ============================
   event wiring & dev
   ============================ */
document.getElementById('roll1').addEventListener('click', ()=> { rollOnce(); saveState(); renderAll(); spawnShootingStarIf(); });
document.getElementById('multiRun').addEventListener('click', ()=> {
  if(!state.devEnabled){ alert('Dev mode required for multi N'); return; }
  const n = parseInt(document.getElementById('multiN').value||0,10);
  if(!n || n<=0) return alert('Enter a positive N');
  rollMultiN(n);
});

document.querySelectorAll('.tab').forEach(t=>{
  t.addEventListener('click', (e)=>{
    document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));
    t.classList.add('active');
    const target = t.dataset.tab;
    document.querySelectorAll('.tab-pane').forEach(p=> p.style.display='none');
    document.getElementById(target).style.display='block';
  });
});

/* quick open */
document.getElementById('openDex').addEventListener('click', ()=> { document.querySelector('[data-tab="foodsTab"]').click(); });
document.getElementById('openAch').addEventListener('click', ()=> { document.querySelector('[data-tab="achsTab"]').click(); });
document.getElementById('openCombos').addEventListener('click', ()=> { document.querySelector('[data-tab="combosTab"]').click(); });

/* settings */
document.getElementById('settingsBtn').addEventListener('click', ()=> { document.getElementById('settingsDrawer').style.display='block'; });
document.getElementById('closeSettings').addEventListener('click', ()=> { document.getElementById('settingsDrawer').style.display='none'; });

document.querySelectorAll('input[name="bgMode"]').forEach(r=> r.addEventListener('change', (e)=>{
  setBackgroundMode(e.target.value);
}));

/* bg opacity */
document.getElementById('bgOpacity').addEventListener('input', (e)=>{
  const v = parseFloat(e.target.value);
  document.documentElement.style.setProperty('--bg-overlay', v);
  document.getElementById('bgOverlay').style.background = `rgba(0,0,0,${v})`;
});

/* clock format */
document.querySelectorAll('input[name="clockFmt"]').forEach(r=> r.addEventListener('change', (e)=> {
  clock24 = e.target.value==='24';
  localStorage.setItem('clock_format_24_final', clock24? '1':'0');
}));

/* export/import */
document.getElementById('exportSave').addEventListener('click', ()=>{
  const data = localStorage.getItem(STORAGE_KEY);
  if(!data){ alert('No save data to export'); return; }
  const blob = new Blob([data], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href = url; a.download = 'ultimate_food_save.json'; a.click(); URL.revokeObjectURL(url);
});
document.getElementById('importSave').addEventListener('click', ()=> {
  const inp = document.createElement('input'); inp.type='file'; inp.accept='application/json'; inp.onchange = (ev)=>{
    const f = ev.target.files[0]; if(!f) return;
    const reader = new FileReader(); reader.onload = ()=> {
      try{
        const parsed = JSON.parse(reader.result);
        localStorage.setItem(STORAGE_KEY, JSON.stringify(parsed)); loadState(); saveState(); renderAll(); alert('Save imported.');
      }catch(err){ alert('Invalid file'); }
    }; reader.readAsText(f);
  }; inp.click();
});

/* reset/wipe */
document.getElementById('resetAll').addEventListener('click', ()=> clearAllData());
document.getElementById('wipeData').addEventListener('click', ()=> clearAllData());
document.getElementById('wipeDataSmall').addEventListener('click', ()=> clearAllData());
function clearAllData(){
  if(!confirm('Reset ALL saved data? This will wipe Dex, inventory, achievements and history.')) return;
  state = {
    inventory:{}, foodDex:new Set(), achievements:new Set(), completedCombos:new Set(),
    pulls:0, pityMythic:0, pitySecret:0, extraRolls:0, history:[], firstObtainedAt:{}, devEnabled:false, goldenUnlocked:false
  };
  saveState(); renderAll(); createConfetti(160);
}

/* dev mode toggle & populate */
function toggleDevUI(on){
  state.devEnabled = !!on;
  document.getElementById('devEnableCheckbox').checked = state.devEnabled;
  document.getElementById('devControls').style.display = state.devEnabled ? 'block':'none';
  document.getElementById('devGear').style.display = state.devEnabled ? 'flex' : 'none';
  saveState();
  if(state.devEnabled) populateDevSelects();
}
document.getElementById('devEnableCheckbox').addEventListener('change', (e)=> toggleDevUI(e.target.checked));

function populateDevSelects(){
  const giveFoodSelect = document.getElementById('giveFoodSelect');
  giveFoodSelect.innerHTML = ITEMS.map(it=>`<option value="${it.name}">${it.emoji} ${it.name} (${it.rarity})</option>`).join('');
  const comboSelect = document.getElementById('giveComboSelect');
  comboSelect.innerHTML = COMBOS.map(c=>`<option value="${c.result}">üß© ${c.result}</option>`).join('');
}

document.getElementById('devGear').addEventListener('click', ()=> {
  const el = document.getElementById('devDrawer');
  if(el && el.classList.contains('open')) { el.classList.remove('open'); el.style.display='none'; }
  else { 
    // create dev drawer if missing
    let drawer = document.getElementById('devDrawer');
    if(!drawer){
      drawer = document.createElement('div'); drawer.id='devDrawer'; drawer.style.cssText='position:fixed;right:14px;bottom:154px;width:360px;background:var(--card-bg);border-radius:12px;padding:12px;border:2px solid var(--accent);z-index:10001;display:block;';
      drawer.innerHTML = '<strong>Dev Tools</strong><div id="devInner"></div>';
      document.body.appendChild(drawer);
    }
    drawer.classList.add('open'); drawer.style.display='block'; populateDevSelects();
  }
});

/* dev actions */
document.getElementById('giveFoodBtn').addEventListener('click', ()=>{
  const name = document.getElementById('giveFoodSelect').value;
  state.inventory[name] = (state.inventory[name]||0)+1; state.foodDex.add(name); if(!state.firstObtainedAt[name]) state.firstObtainedAt[name] = nowISO();
  log(`[DEV] Gave food: ${name}`); saveState(); renderAll();
});
document.getElementById('giveComboBtn').addEventListener('click', ()=>{
  const name = document.getElementById('giveComboSelect').value;
  state.inventory[name] = (state.inventory[name]||0)+1; state.foodDex.add(name); state.completedCombos.add(name); if(!state.firstObtainedAt[name]) state.firstObtainedAt[name] = nowISO();
  log(`[DEV] Gave combo result: ${name}`); saveState(); renderAll();
});
document.getElementById('forceCommon').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Common');
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Common: ${pick.name}`); saveState(); renderAll();
});
document.getElementById('forceLegendary').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Legendary');
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Legendary: ${pick.name}`,'legendary'); saveState(); renderAll();
});
document.getElementById('forceMythic').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Mythic'); if(pool.length===0){ alert('No Mythic items.'); return; }
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Mythic: ${pick.name}`,'legendary'); createConfetti(200); saveState(); renderAll();
});
document.getElementById('forceSecret').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Secret'); if(pool.length===0){ alert('No Secret items.'); return; }
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Secret: ${pick.name}`,'secret'); createConfetti(200); saveState(); renderAll();
});
document.getElementById('revealRecipes').addEventListener('click', ()=>{
  COMBOS.forEach(c=> { state.foodDex.add(c.result); state.completedCombos.add(c.result); if(!state.firstObtainedAt[c.result]) state.firstObtainedAt[c.result] = nowISO(); });
  log('[DEV] Revealed all recipes'); saveState(); renderAll();
});
document.getElementById('devReset').addEventListener('click', ()=>{
  if(!confirm('Reset save (dev)?')) return;
  state = { inventory:{}, foodDex:new Set(), achievements:new Set(), completedCombos:new Set(), pulls:0, pityMythic:0, pitySecret:0, extraRolls:0, history:[], firstObtainedAt:{}, devEnabled:false, goldenUnlocked:false };
  saveState(); renderAll(); log('[DEV] Reset performed');
});

/* ============================
   shooting star helper
   ============================ */
function spawnShootingStarIf(){
  if(Math.random()<0.36){
    const el = document.createElement('div');
    el.style.position='fixed'; el.style.width='3px'; el.style.height='120px'; el.style.background='linear-gradient(90deg,rgba(255,255,255,1),transparent)'; el.style.zIndex=0; el.style.pointerEvents='none';
    const top = 10 + Math.random()*window.innerHeight*0.45;
    el.style.top = top + 'px';
    el.style.left = (window.innerWidth + 50) + 'px';
    el.style.transform = `rotate(${(20+Math.random()*40)*-1}deg)`;
    document.body.appendChild(el);
    const dur = 800 + Math.random()*1600;
    el.animate([{transform:el.style.transform, opacity:1},{transform:`translate(-${window.innerWidth + 500}px, ${window.innerHeight}px) ${el.style.transform}`, opacity:0}],{duration:dur, easing:'linear'});
    setTimeout(()=> el.remove(), dur+80);
  }
}

/* ============================
   live clock
   ============================ */
const clockEl = document.getElementById('liveClock');
function tickClock(){ clockEl.innerText = formatTime(clock24); }
setInterval(tickClock, 1000);
tickClock();

/* ============================
   INIT
   ============================ */
window.addEventListener('load', ()=>{
  loadState();

  // apply bg overlay from CSS var
  const rawOverlay = getComputedStyle(document.documentElement).getPropertyValue('--bg-overlay') || 0.10;
  document.getElementById('bgOpacity').value = parseFloat(rawOverlay);
  document.getElementById('bgOverlay').style.background = `rgba(0,0,0,${parseFloat(rawOverlay)})`;

  // dev UI if saved
  if(state.devEnabled) { document.getElementById('devEnableCheckbox').checked = true; toggleDevUI(true); }

  // default background mode: floating
  document.querySelectorAll('input[name="bgMode"]').forEach(r=> { if(r.value==='floating') r.checked=true; });
  setBackgroundMode('floating');

  // populate selects
  populateDevSelects();

  // render UI
  renderAll();
  log('Welcome ‚Äî floating foods default. Open Settings (bottom-left) to change visuals.');
  // occasional small stars
  setInterval(()=> { if(Math.random()<0.38) spawnShootingStarIf(); }, 4800);
});

/* expose debug */
window._state = ()=> state;
window._forceAdd = (n)=>{ state.inventory[n]=(state.inventory[n]||0)+1; state.foodDex.add(n); if(!state.firstObtainedAt[n]) state.firstObtainedAt[n]=nowISO(); log('[DEV] forced '+n); saveState(); renderAll(); }
</script>
</body>
</html>
