<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Ultimate Food Game ‚Äî All In One</title>
<style>
/* ---------- base / themes ---------- */
*{box-sizing:border-box}
:root{
  --bg:#000;
  --bg-overlay:0.10;
  --fg:#fff;
  --card-bg:rgba(0,0,0,0.75);
  --accent:#fff;
  --muted:rgba(255,255,255,0.06);
  --panel-w:360px;
  --glass: rgba(255,255,255,0.03);
  --ui-scale:1;
}
/* layout */
html,body{height:100%}
body{
  margin:0;font-family:Inter,Arial,Helvetica,sans-serif;
  background:var(--bg);color:var(--fg);
  min-height:100vh;display:flex;flex-direction:column;align-items:center;padding:12px;overflow-x:hidden;position:relative;
}
/* overlay for adjustable transparency */
#bgOverlay{position:fixed;inset:0;pointer-events:none;background:rgba(0,0,0,var(--bg-overlay));z-index:0;transition:background .25s ease}

/* wrapper */
#app{width:100%;max-width:1100px;z-index:2;transition:filter .3s}

/* header */
h1{margin:10px 0 14px;text-align:center;font-size:20px}

/* container */
.container{display:grid;grid-template-columns:1fr var(--panel-w);gap:12px;width:100%}
@media(max-width:980px){ .container{grid-template-columns:1fr} }

/* card */
.card{background:var(--card-bg);border:2px solid var(--accent);border-radius:12px;padding:12px;margin-bottom:12px;backdrop-filter:blur(6px);transition:transform .2s ease, box-shadow .2s ease}
.card:active{transform:translateY(2px)}
.controls{display:flex;flex-wrap:wrap;gap:8px;justify-content:center;margin-bottom:8px}
.btn{background:transparent;color:var(--fg);border:2px solid var(--accent);padding:8px 12px;border-radius:8px;cursor:pointer;font-weight:700;transition:background .14s, color .14s, transform .12s}
.btn:hover{transform:translateY(-2px); background:var(--accent); color:var(--bg)}
.small{font-size:13px;color:var(--fg)}

/* result & log */
#result{font-size:16px;text-align:center;padding:14px;border-radius:10px;margin-bottom:8px;background:linear-gradient(90deg,#ffffff06,#ffffff03);font-weight:800;letter-spacing:.2px}
#log{max-height:220px;overflow:auto;padding:8px;border-radius:8px;background:var(--muted);font-size:13px}
.log-row{display:flex;gap:8px;align-items:center;margin:6px 0;opacity:0;animation:logIn .35s forwards}
@keyframes logIn{to{opacity:1;transform:none}}
.log-dot{width:10px;height:10px;border-radius:50%}
.secret{color:#ff77ff;font-weight:700}
.legendary{color:gold;font-weight:700}

/* right panel */
.panel{display:flex;flex-direction:column;height:100%}
.panel .tabs{display:flex;gap:6px;margin-bottom:8px}
.tab{flex:1;padding:8px;border-radius:8px;border:1px solid var(--accent);text-align:center;cursor:pointer;background:transparent;color:var(--fg);font-weight:700;transition:background .18s,color .18s}
.tab.active{background:var(--accent);color:var(--bg)}
.panel .panel-body{overflow:auto;padding:8px;background:linear-gradient(180deg,rgba(255,255,255,0.02),rgba(255,255,255,0.01));border-radius:8px;min-height:420px}

/* dex grid */
.dex-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(110px,1fr));gap:8px}
.dex-item{display:flex;flex-direction:column;align-items:center;padding:8px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;transition:transform .12s,box-shadow .12s}
.dex-item.locked{opacity:.45}
.dex-item:hover{transform:translateY(-6px);box-shadow:0 8px 28px rgba(0,0,0,0.5)}
.dex-emoji{font-size:28px;margin-bottom:6px}
.dex-name{font-size:13px;word-break:break-word}

/* achievements */
.ach-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));gap:8px}
.ach-card{padding:10px;border-radius:8px;background:rgba(255,255,255,0.02);text-align:center;transition:transform .14s}
.ach-card.unlocked{border:1px solid gold;box-shadow:0 8px 20px rgba(255,215,0,0.06)}
.ach-title{font-weight:800}

/* combos */
.combo-card{padding:10px;border-radius:8px;background:rgba(255,255,255,0.02);margin-bottom:8px}
.combo-req{display:flex;gap:6px;flex-wrap:wrap;margin-bottom:6px}
.combo-result{font-weight:800}

/* drop rates tab */
.drop-row{display:flex;align-items:center;gap:10px;margin:8px 0}
.rate-bar{flex:1;height:14px;border-radius:999px;background:linear-gradient(90deg,#333,#222);overflow:hidden;border:1px solid rgba(255,255,255,0.04)}
.rate-fill{height:100%;width:0%;transition:width .8s cubic-bezier(.2,.8,.2,1)}
.rate-label{min-width:110px;text-align:right;font-size:13px}

/* progress bars special */
.rainbow{background:linear-gradient(90deg,#ff6ec7,#ffd27f,#9effa1,#7adfff,#c9a9ff);filter:saturate(1.2);}

/* secret bar style */
.secret-fill{background:linear-gradient(90deg,#ff4d6d,#ff7b90);box-shadow:0 6px 30px rgba(255,80,120,0.12)}
.mythic-fill{background:linear-gradient(90deg,#9effa1,#7adfff,#c9a9ff);box-shadow:0 6px 30px rgba(150,200,255,0.08)}

/* float area */
#floatArea{position:fixed;inset:0;pointer-events:none;z-index:0;overflow:hidden}
.float-emoji{position:absolute;font-size:22px;opacity:0.92;will-change:transform,opacity;transition:transform 8s linear, opacity 8s linear}

/* confetti canvas */
#confetti{position:fixed;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:9999}

/* golden background unlock */
.gold-bg{
  background:linear-gradient(180deg,#2b1f00,#4b3000); /* base */
}
.gold-glitter{position:fixed;inset:0;pointer-events:none;z-index:1;mix-blend-mode:screen}

/* floating bubble animation for aero themes */
.bubble{position:absolute;border-radius:50%;opacity:.9;mix-blend-mode:screen;pointer-events:none;transform:translateY(20vh);animation:rise 14s linear infinite}
@keyframes rise{0%{transform:translateY(80vh) scale(.6);opacity:0}30%{opacity:.9}100%{transform:translateY(-40vh) scale(1.2);opacity:0}}

/* small helper text */
.small-muted{font-size:12px;color:rgba(255,255,255,0.7)}

/* anim helpers */
.pop{animation:pop .36s cubic-bezier(.2,.9,.2,1)}
@keyframes pop{0%{transform:scale(.92);opacity:.6}60%{transform:scale(1.06);opacity:1}100%{transform:scale(1)}}

/* responsive tweaks */
@media(max-width:980px){ #settingsDrawer{left:8px;right:8px;width:auto} }

/* ‚öôÔ∏è ULTIMATE SETTINGS STYLES */
.settings-category { margin-bottom:20px; padding:10px; background:rgba(255,255,255,0.03); border-radius:8px; }
.settings-category label { display:block; margin:8px 0; color:#ddd; cursor:pointer; }
.settings-category input, .settings-category select { margin-left:8px; }

/* üé® ENHANCED BACKGROUND THEMES */
/* Street Food Festival */
body.bg-street-food {
  background: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.7)), 
              url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%231a1a2a"/><circle cx="20" cy="20" r="8" fill="%23ff6b6b"/><circle cx="60" cy="30" r="6" fill="%234ecdc4"/><circle cx="80" cy="60" r="7" fill="%23ffe66d"/></svg>');
  background-size: cover;
}

.neon-sign {
  position: fixed;
  top: 20px;
  right: 20px;
  font-size: 24px;
  font-weight: bold;
  color: #ff6b6b;
  text-shadow: 0 0 10px #ff6b6b, 0 0 20px #ff6b6b, 0 0 30px #ff6b6b;
  animation: neonFlicker 2s infinite alternate;
}

@keyframes neonFlicker {
  0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
    opacity: 1;
    text-shadow: 0 0 10px #ff6b6b, 0 0 20px #ff6b6b, 0 0 30px #ff6b6b;
  }
  20%, 24%, 55% {
    opacity: 0.8;
    text-shadow: 0 0 5px #ff6b6b, 0 0 10px #ff6b6b;
  }
}

/* Cozy Ramen Shop */
body.bg-ramen-shop {
  background: 
    radial-gradient(circle at 20% 50%, rgba(139, 69, 19, 0.3), transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(210, 180, 140, 0.2), transparent 50%),
    linear-gradient(135deg, #8B4513 0%, #D2B48C 100%);
}

.steam {
  position: absolute;
  background: rgba(255, 255, 255, 0.6);
  border-radius: 50%;
  filter: blur(8px);
  animation: steamRise 8s infinite;
}

@keyframes steamRise {
  0% { transform: translateY(0) scale(1); opacity: 0; }
  50% { opacity: 0.6; }
  100% { transform: translateY(-100px) scale(2); opacity: 0; }
}

/* Dessert Caf√© */
body.bg-dessert-cafe {
  background: linear-gradient(135deg, #ffafbd 0%, #ffc3a0 100%);
}

.floating-pastry {
  position: absolute;
  font-size: 24px;
  animation: floatDown 15s linear infinite;
}

@keyframes floatDown {
  0% { transform: translateY(-100px) rotate(0deg); opacity: 0; }
  10% { opacity: 1; }
  90% { opacity: 1; }
  100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
}

/* Luxury Buffet Hall */
body.bg-buffet-hall {
  background: 
    radial-gradient(circle at 10% 20%, rgba(255, 215, 0, 0.1), transparent 40%),
    radial-gradient(circle at 90% 80%, rgba(255, 215, 0, 0.1), transparent 40%),
    linear-gradient(135deg, #2c1a0a 0%, #5a3921 100%);
}

.sparkle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: gold;
  border-radius: 50%;
  animation: sparkleTwinkle 3s infinite;
}

@keyframes sparkleTwinkle {
  0%, 100% { opacity: 0; transform: scale(0); }
  50% { opacity: 1; transform: scale(1); }
}

/* Farmer's Market */
body.bg-farmers-market {
  background: 
    linear-gradient(to bottom, #87CEEB 0%, #87CEEB 70%, #8B4513 70%, #8B4513 100%);
}

.sunflower {
  position: absolute;
  bottom: 30%;
  font-size: 24px;
  animation: sunflowerSway 8s ease-in-out infinite;
}

@keyframes sunflowerSway {
  0%, 100% { transform: rotate(-5deg); }
  50% { transform: rotate(5deg); }
}

/* Seaside Boardwalk */
body.bg-seaside {
  background: linear-gradient(to bottom, #1e90ff 0%, #87ceeb 50%, #ffa500 100%);
}

.wave {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 40px;
  background: 
    radial-gradient(ellipse at center, rgba(30, 144, 255, 0.6) 0%, transparent 70%),
    radial-gradient(ellipse at center, rgba(135, 206, 235, 0.4) 0%, transparent 70%);
  animation: waveMove 4s ease-in-out infinite;
}

@keyframes waveMove {
  0%, 100% { transform: translateX(0); }
  50% { transform: translateX(-20px); }
}

/* Tokyo Street */
body.bg-tokyo {
  background: linear-gradient(135deg, #1a1a2a 0%, #2a1a4a 100%);
}

.neon-glow {
  text-shadow: 
    0 0 5px #ff00ff,
    0 0 10px #ff00ff,
    0 0 15px #ff00ff,
    0 0 20px #ff00ff,
    0 0 35px #ff00ff,
    0 0 40px #ff00ff;
  animation: neonPulse 2s infinite alternate;
}

@keyframes neonPulse {
  from { opacity: 0.8; }
  to { opacity: 1; }
}

/* Fantasy Castle Banquet */
body.bg-fantasy-castle {
  background: 
    radial-gradient(circle at 20% 80%, rgba(75, 0, 130, 0.3), transparent 50%),
    linear-gradient(135deg, #4B0082 0%, #2c003e 100%);
}

.floating-candle {
  position: absolute;
  width: 6px;
  height: 20px;
  background: linear-gradient(to bottom, #8B4513, #D2691E);
  border-radius: 3px;
  animation: candleFloat 10s ease-in-out infinite;
}

.floating-candle::before {
  content: '';
  position: absolute;
  top: -8px;
  left: 50%;
  transform: translateX(-50%);
  width: 12px;
  height: 12px;
  background: radial-gradient(circle, #ffa500, #ff4500, transparent 70%);
  border-radius: 50%;
  animation: candleFlicker 1.5s infinite alternate;
}

@keyframes candleFloat {
  0%, 100% { transform: translateY(0) rotate(0deg); }
  50% { transform: translateY(-20px) rotate(5deg); }
}

@keyframes candleFlicker {
  0%, 100% { opacity: 0.8; transform: translateX(-50%) scale(1); }
  50% { opacity: 1; transform: translateX(-50%) scale(1.1); }
}

/* Food Laboratory */
body.bg-food-lab {
  background: 
    radial-gradient(circle at 30% 70%, rgba(128, 128, 128, 0.2), transparent 50%),
    linear-gradient(135deg, #2f2f2f 0%, #4a4a4a 100%);
}

.bubbling-tube {
  position: absolute;
  width: 40px;
  height: 80px;
  background: linear-gradient(to bottom, transparent 10%, rgba(0, 255, 255, 0.3) 30%, rgba(0, 255, 255, 0.6) 50%, rgba(0, 255, 255, 0.3) 70%, transparent 90%);
  border-radius: 20px;
  animation: tubeBubble 4s infinite;
}

@keyframes tubeBubble {
  0% { background-position: 0 0; }
  100% { background-position: 0 -100px; }
}

/* Hidden Garden Picnic */
body.bg-hidden-garden {
  background: 
    radial-gradient(circle at 10% 20%, rgba(255, 182, 193, 0.3), transparent 40%),
    radial-gradient(circle at 90% 80%, rgba(173, 216, 230, 0.3), transparent 40%),
    linear-gradient(135deg, #87CEEB 0%, #98FB98 100%);
}

.falling-petal {
  position: absolute;
  font-size: 16px;
  color: #ffb6c1;
  animation: petalFall 12s linear infinite;
}

@keyframes petalFall {
  0% { transform: translateY(-100px) rotate(0deg); opacity: 0; }
  10% { opacity: 1; }
  90% { opacity: 1; }
  100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
}

/* Thunder Reward Styles */
body.thunder-bg {
  background: linear-gradient(180deg, #1a1a21 0%, #f7e640 100%);
  overflow: hidden;
}

.thunder-aura {
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 1;
  background: radial-gradient(circle at 50% 60%, rgba(255, 255, 80, 0.14), transparent 100%);
  mix-blend-mode: screen;
}

.thunder-flash {
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 2;
  background: linear-gradient(180deg, rgba(255, 255, 80, 0.33) 0%, transparent 100%);
  opacity: 0;
  transition: opacity 0.18s;
}

.thunder-cloud-emoji {
  position: fixed;
  z-index: 3;
  font-size: 64px;
  opacity: 0.85;
  pointer-events: none;
  filter: blur(0.5px) drop-shadow(0 6px 32px #000a);
  animation: cloud-move 14s linear forwards;
}

@keyframes cloud-move {
  0% {
    opacity: 0;
    transform: translateY(0) scale(0.82);
  }
  6% {
    opacity: 0.85;
  }
  80% {
    opacity: 0.85;
  }
  100% {
    opacity: 0;
    transform: translateY(16vh) scale(1.02);
  }
}

.thunder-flash.active {
  opacity: 1;
}

.thunder-clouds {
  animation: rise 15s linear infinite;
}

@keyframes rise {
  0% {
    transform: translateY(80vh) scale(0.6);
    opacity: 0;
  }
  30% {
    opacity: 0.8;
  }
  100% {
    transform: translateY(-40vh) scale(1.2);
    opacity: 0;
  }
}

/* Theme modes */
body.light-theme {
  --bg: #f0f0f0;
  --fg: #333;
  --card-bg: rgba(255,255,255,0.8);
  --accent: #666;
  --muted: rgba(0,0,0,0.06);
}

body.dark-theme {
  --bg: #000;
  --fg: #fff;
  --card-bg: rgba(0,0,0,0.75);
  --accent: #fff;
  --muted: rgba(255,255,255,0.06);
}

/* Mobile mode */
body.mobile-mode {
  --panel-w: 100%;
}

body.mobile-mode .container {
  grid-template-columns: 1fr;
}

/* Low power mode */
body.low-power-mode * {
  animation-duration: 0.001s !important;
  transition-duration: 0.001s !important;
}

/* Leaderboard styles */
.leaderboard-entry {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  margin: 4px 0;
  background: rgba(255,255,255,0.05);
  border-radius: 6px;
  transition: transform 0.2s;
}

.leaderboard-entry:hover {
  transform: translateX(4px);
  background: rgba(255,255,255,0.08);
}

.leaderboard-rank {
  font-weight: bold;
  color: gold;
  min-width: 30px;
}

.leaderboard-name {
  flex: 1;
  margin: 0 12px;
}

.leaderboard-score {
  font-weight: bold;
  color: #4CAF50;
}

.leaderboard-header {
  display: flex;
  justify-content: space-between;
  padding: 8px 12px;
  background: rgba(255,255,255,0.1);
  border-radius: 6px;
  margin-bottom: 8px;
  font-weight: bold;
}
</style>
</head>
<body>
<div id="bgOverlay"></div>
<div id="floatArea"></div>

<div id="app">
  <h1>üç¥ Ultimate Food Game ‚Äî All In One (Single Screen)</h1>

  <div class="container card">
    <div>
      <div id="result">You Got: ‚Äî</div>

      <div class="controls">
        <button class="btn" id="roll1">üé≤ Roll 1</button>
        <button class="btn" id="rollEmergencyFridge" style="background:#4A90E2; display:none;">üßä Emergency Fridge</button>
        <button class="btn" id="infoBtn">‚ÑπÔ∏è Drop Rates & Pity</button>
        <button class="btn" id="settingsBtn">‚öôÔ∏è Settings</button>
      </div>

      <div id="log" aria-live="polite"></div>

      <div class="card" style="margin-top:8px">
        <h3 style="margin:0 0 8px">Quick Actions</h3>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <button class="btn" id="openDex">üìñ Open Food Dex</button>
          <button class="btn" id="openAch">üèÜ Open Achievements</button>
          <button class="btn" id="openCombos">üß© Open Combos</button>
          <button class="btn" id="playMiniGame" style="background:#9C27B0;">üéÆ Mini-Game</button>
          <button class="btn" id="resetAll">üîÑ Reset All Data</button>
        </div>
      </div>

    </div>

    <div class="panel">
      <div class="tabs">
        <div class="tab active" data-tab="foodsTab">Foods</div>
        <div class="tab" data-tab="achsTab">Achievements</div>
        <div class="tab" data-tab="combosTab">Combos</div>
        <div class="tab" data-tab="settingsTab">‚öôÔ∏è Settings</div>
        <div class="tab" data-tab="dropsTab">Drop Rates</div>
        <div class="tab" data-tab="devTab">Stats / Dev</div>
      </div>

      <div class="panel-body card" id="panelBody">
        <!-- Foods -->
        <div id="foodsTab" class="tab-pane">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Food Dex</strong> <span id="dexProgress" class="small-muted"></span></div>
            <div class="small-muted">Sort: 
              <select id="dexSort">
                <option value="alpha">A‚ÜíZ</option>
                <option value="rarity">Rarity (Best‚ÜíCommon)</option>
              </select>
            </div>
          </div>
          <div id="foodsGrid" class="dex-grid"></div>
        </div>

        <!-- Achievements -->
        <div id="achsTab" class="tab-pane" style="display:none">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Achievements</strong> <span id="achProgress" class="small-muted"></span></div>
            <div class="small-muted">Filter: <select id="achFilter"><option value="all">All</option><option value="unlocked">Unlocked</option><option value="locked">Locked</option></select></div>
          </div>
          <div id="achGrid" class="ach-grid"></div>
        </div>

        <!-- Combos -->
        <div id="combosTab" class="tab-pane" style="display:none">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Combos / Recipes</strong></div>
            <div class="small-muted">Tip: combos consume ingredients automatically when created.</div>
          </div>
          <div id="combosList"></div>
        </div>

        <!-- ‚öôÔ∏è ULTIMATE SETTINGS -->
        <div id="settingsTab" class="tab-pane" style="display:none">
          <div style="max-height:400px; overflow-y:auto;">
            <h3 style="margin-top:0; color:#FFD700;">‚öôÔ∏è Ultimate Settings</h3>
            
            <!-- 1. General Settings -->
            <div class="settings-category">
              <h4 style="color:#4CAF50;">üéµ General Settings</h4>
              <label><input type="checkbox" id="soundEnabled"> Sound Effects</label><br>
              <label><input type="checkbox" id="musicEnabled"> Background Music</label><br>
              <label><input type="checkbox" id="animationsEnabled"> ‚ú® Animations</label><br>
              <label>üîä Sound Volume: <input type="range" id="soundVolume" min="0" max="100" style="width:100px;"></label><br>
              <label>üéµ Music Volume: <input type="range" id="musicVolume" min="0" max="100" style="width:100px;"></label><br>
              <label>üì± UI Scale: <input type="range" id="uiScale" min="80" max="150" style="width:100px;"> <span id="uiScaleValue">100%</span></label>
            </div>

            <!-- 2. Mobile Mode -->
            <div class="settings-category">
              <h4 style="color:#FF9800;">üì± Mobile Mode</h4>
              <label><input type="checkbox" id="mobileMode"> üì≤ Mobile UI Layout</label><br>
              <label>‚úã One-Hand Mode: 
                <select id="oneHandMode">
                  <option value="left">‚Üê Left</option>
                  <option value="center">‚Üï Center</option>
                  <option value="right">‚Üí Right</option>
                </select>
              </label><br>
              <label><input type="checkbox" id="swipeNavigation"> üëÜ Swipe Navigation</label><br>
              <label><input type="checkbox" id="compactDexMode"> üìñ Compact Dex Mode</label><br>
              <label><input type="checkbox" id="offlineCaching"> üíæ Offline Caching</label>
            </div>

            <!-- 3. Offline Mode -->
            <div class="settings-category">
              <h4 style="color:#2196F3;">üåê Offline Mode</h4>
              <label><input type="checkbox" id="offlineRolls"> üçú Store Rolls Offline</label><br>
              <label><input type="checkbox" id="offlineAchievements"> üèÜ Offline Achievements</label><br>
              <label><input type="checkbox" id="offlineDexAccess"> üìö Offline Dex Access</label><br>
              <label><input type="checkbox" id="emergencyFridgeEnabled"> üßä Emergency Fridge</label><br>
              <label><input type="checkbox" id="autoSync"> üîÑ Auto Sync When Online</label>
            </div>

            <!-- 4. Customization -->
            <div class="settings-category">
              <h4 style="color:#9C27B0;">üé® Customization</h4>
              <label>üåÑ Background: 
                <select id="backgroundTheme">
                  <option value="default">üéØ Default Dark</option>
                  <option value="street-food">üé™ Street Food Festival</option>
                  <option value="ramen-shop">üçú Cozy Ramen Shop</option>
                  <option value="dessert-cafe">üç∞ Dessert Caf√©</option>
                  <option value="buffet-hall">üèõÔ∏è Luxury Buffet Hall</option>
                  <option value="farmers-market">üåΩ Farmer's Market</option>
                  <option value="seaside">üåä Seaside Boardwalk</option>
                  <option value="tokyo">üèôÔ∏è Tokyo Street</option>
                  <option value="fantasy-castle">üè∞ Fantasy Castle Banquet</option>
                  <option value="food-lab">üî¨ Food Laboratory</option>
                  <option value="hidden-garden">üå∏ Hidden Garden Picnic</option>
                </select>
              </label><br>
              <label>üé® Theme: 
                <select id="themeMode">
                  <option value="auto">üåì Auto</option>
                  <option value="light">‚òÄÔ∏è Light</option>
                  <option value="dark">üåô Dark</option>
                </select>
              </label><br>
              <label><input type="checkbox" id="floatingEmojis"> üç£ Floating Emoji Effects</label><br>
              <label>üìë Dex Layout: 
                <select id="dexLayout">
                  <option value="grid">üìä Grid View</option>
                  <option value="list">üìù List View</option>
                </select>
              </label><br>
              <label><input type="checkbox" id="foodVariants"> ‚ú® Shiny Food Variants</label>
            </div>

            <!-- 5. Performance -->
            <div class="settings-category">
              <h4 style="color:#795548;">‚ö° Performance</h4>
              <label><input type="checkbox" id="lowPowerMode"> üîã Low Power Mode</label><br>
              <label><input type="checkbox" id="dataSaver"> üì∂ Data Saver</label><br>
              <label>üéÆ FPS Limit: 
                <select id="fpsLimit">
                  <option value="30">30 FPS (Battery)</option>
                  <option value="60">60 FPS (Smooth)</option>
                </select>
              </label><br>
              <label>‚è±Ô∏è Auto Save: <input type="range" id="autoSaveInterval" min="10" max="120" style="width:100px;"> <span id="autoSaveValue">30s</span></label>
            </div>

            <!-- 6. Extra Fun -->
            <div class="settings-category">
              <h4 style="color:#E91E63;">üéâ Extra Fun</h4>
              <label><input type="checkbox" id="dailyLoginRewards"> üéÅ Daily Login Rewards</label><br>
              <label><input type="checkbox" id="miniGamesEnabled"> üéÆ Mini-Games</label><br>
              <label><input type="checkbox" id="experimentalFeatures"> üß™ Experimental Features</label><br>
              <label><input type="checkbox" id="mysteryBackgroundMode"> üé≤ Random Background</label><br>
              <label><input type="checkbox" id="hiddenCodesEnabled"> üóùÔ∏è Hidden Codes</label>
            </div>

            <div style="margin-top:20px; padding:10px; background:rgba(255,255,255,0.05); border-radius:8px;">
              <button class="btn" id="saveSettings" style="background:#4CAF50; margin-right:8px;">üíæ Save Settings</button>
              <button class="btn" id="resetSettings" style="background:#FF5722;">üîÑ Reset to Defaults</button>
              <div style="margin-top:8px; font-size:0.9em; color:#aaa;">
                Settings are automatically saved and work offline!
              </div>
            </div>
          </div>
        </div>

        <!-- Drop Rates & Pity -->
        <div id="dropsTab" class="tab-pane" style="display:none">
          <h4 style="margin-top:0">Drop Rates & Pity</h4>
          <div class="small-muted" style="margin-bottom:8px">Displayed per-pull target probabilities (approx). Mythic and Secret have dedicated pity counters shown below.</div>

          <div class="drop-row"><div class="rate-label">Common</div><div class="rate-bar"><div id="fill-common" class="rate-fill" style="background:#7adfff"></div></div><div style="width:70px;text-align:right">~high</div></div>
          <div class="drop-row"><div class="rate-label">Uncommon</div><div class="rate-bar"><div id="fill-uncommon" class="rate-fill" style="background:#9effa1"></div></div><div style="width:70px;text-align:right">~mid</div></div>
          <div class="drop-row"><div class="rate-label">Rare</div><div class="rate-bar"><div id="fill-rare" class="rate-fill" style="background:#ffd27f"></div></div><div style="width:70px;text-align:right">~low</div></div>
          <div class="drop-row"><div class="rate-label">Legendary</div><div class="rate-bar"><div id="fill-legendary" class="rate-fill" style="background:gold"></div></div><div style="width:70px;text-align:right">very low</div></div>
          <div class="drop-row"><div class="rate-label">Mythic</div><div class="rate-bar"><div id="fill-mythic" class="rate-fill mythic-fill"></div></div><div style="width:70px;text-align:right" id="mythicPityLabel"></div></div>
          <div class="drop-row"><div class="rate-label">Secret</div><div class="rate-bar"><div id="fill-secret" class="rate-fill secret-fill"></div></div><div style="width:70px;text-align:right" id="secretPityLabel"></div></div>
          <div style="margin-top:12px" id="dropRatesText" class="small-muted"></div>
        </div>

        <!-- Stats / Dev -->
        <div id="devTab" class="tab-pane" style="display:none">
          <h4 style="margin-top:0">Quick Stats</h4>
          <div id="stats">Pulls: 0 ¬∑ Pity(M): 0 ¬∑ Pity(S): 0 ¬∑ Extra Rolls: 0</div>
          <!-- ‚ö° ENERGY BAR -->
          <div id="energyBar" style="margin-top:10px;">
            <div style="background:#333; border-radius:10px; padding:2px;">
              <div style="background:#4CAF50; height:20px; width:100%; border-radius:8px;"></div>
            </div>
            <div style="text-align:center; margin-top:5px;">‚ö° Energy: 100/100</div>
          </div>
          <!-- üéÅ DAILY REWARD STATUS -->
          <div id="dailyReward" style="margin-top:10px; text-align:center; color:#FFD700; font-weight:bold;">
            üéÅ Daily Reward: Ready to claim!
          </div>
          <!-- ‚è∞ LIVE CLOCK -->
          <div id="liveClock" style="margin-top:8px; text-align:center; color:#4CAF50; font-weight:bold; padding:6px; background:rgba(76,175,80,0.1); border-radius:8px;">‚Äî</div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <h4>üèÜ Personal Leaderboard</h4>
          <div id="localLeaderboard" style="max-height:200px; overflow-y:auto; font-size:12px;">
            Loading your best scores...
          </div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <h4>Reaction Time Leaderboard</h4>
          <div id="reactionLeaderboard" style="max-height:200px; overflow-y:auto; font-size:12px;">
            <div class="leaderboard-header">
              <span>Rank</span>
              <span>Time</span>
              <span>Reward</span>
            </div>
            <!-- Leaderboard entries will be populated here -->
          </div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <h4>Top Inventory</h4>
          <div id="quickInv">(empty)</div>
          <hr style="border-color:rgba(255,255,255,0.06)">
          <label style="display:flex;gap:8px;align-items:center;margin-top:8px"><input id="devEnableCheckbox" type="checkbox"/> Enable Developer Mode (shows Dev Gear)</label>
          <div id="devControls" style="display:none;margin-top:8px">
            <div style="display:flex;gap:8px;margin-bottom:8px">
              <select id="giveFoodSelect" style="flex:1"></select>
              <button class="btn" id="giveFoodBtn">‚ûï</button>
            </div>
            <div style="display:flex;gap:8px;margin-bottom:8px">
              <select id="giveComboSelect" style="flex:1"></select>
              <button class="btn" id="giveComboBtn">‚ûï Combo</button>
            </div>

            <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px;margin-top:8px">
              <button class="btn" id="forceCommon">Force Common</button>
              <button class="btn" id="forceLegendary">Force Legendary</button>
              <button class="btn" id="forceMythic">Force Mythic</button>
              <button class="btn" id="forceSecret">Force Secret</button>
            </div>

            <div style="display:flex;gap:8px;margin-top:8px;align-items:center">
              <input id="multiN" type="number" placeholder="N" style="width:80px;padding:8px;border-radius:8px;background:transparent;border:1px solid var(--accent);color:var(--fg)"/>
              <button class="btn" id="multiRun">Multi N (dev)</button>
              <button class="btn" id="revealRecipes">Reveal Recipes</button>
            </div>
            <div style="margin-top:8px;display:grid;grid-template-columns:1fr 1fr;gap:8px">
              <button class="btn" id="devReset">Reset (Dev)</button>
              <button class="btn" id="wipeDataSmall">Wipe Save</button>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<canvas id="confetti"></canvas>

<!-- settings drawer -->
<div id="settingsDrawer" class="card" aria-hidden="true" style="display:none;position:fixed;left:14px;bottom:14px;width:360px;background:var(--card-bg);border-radius:12px;padding:12px;border:2px solid var(--accent);z-index:10001">
  <strong style="color:#fff">Settings</strong>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Background Mode</label>
    <div style="display:flex;gap:8px;color:#fff">
      <label><input type="radio" name="bgMode" value="floating" checked/> Floating Foods</label>
      <label><input type="radio" name="bgMode" value="aeroBlue"/> Aero Blue</label>
      <label><input type="radio" name="bgMode" value="aeroGreen"/> Aero Green</label>
      <label><input type="radio" name="bgMode" value="purpleAero"/> Purple Aero</label>
    </div>
    <div class="small-muted" style="color:#fff;font-size:12px;margin-top:6px">(Floating Foods picks random emojis each run)</div>
  </div>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Background Opacity</label>
    <input id="bgOpacity" class="range" type="range" min="0" max="0.9" step="0.01" value="0.10"/>
    <div class="small-muted" style="color:#fff">Overlay darkness above solid black (0 = no overlay).</div>
  </div>

  <div style="margin-top:8px" class="settings-option">
    <label style="font-weight:700;color:#fff">Clock Format</label>
    <div style="display:flex;gap:8px;color:#fff">
      <label><input type="radio" name="clockFmt" value="12" checked/> 12h</label>
      <label><input type="radio" name="clockFmt" value="24"/> 24h</label>
    </div>
  </div>

  <div style="margin-top:8px;display:flex;gap:8px">
    <button class="btn" id="closeSettings">Close</button>
    <button class="btn" id="exportSave">‚¨áÔ∏è Export Save</button>
    <button class="btn" id="importSave">‚¨ÜÔ∏è Import Save</button>
  </div>

  <div style="margin-top:8px">
    <button class="btn" id="wipeData">‚ö†Ô∏è Wipe All Game Data</button>
    <div class="small-muted" style="color:#fff">Use if you want a completely fresh start.</div>
  </div>
</div>

<script>
/* ============================
   DATA: ~200 foods, combos, achievements
   ============================ */
const ITEMS = (()=>{
  // We'll create numbered names "#001 Apple" etc for clarity.
  const list = [
    // A big curated list of real foods (200+). Each entry: {name, emoji, rarity}
    // Most are Common/Uncommon; Rare/Legendary/Secret/Mythic are few.
    // (I grouped many common fruits/foods)
    "Apple|üçé|Common","Banana|üçå|Common","Orange|üçä|Common","Pear|üçê|Common","Grapes|üçá|Common",
    "Strawberry|üçì|Common","Blueberry|ü´ê|Common","Cherry|üçí|Common","Lemon|üçã|Common","Lime|üü¢|Common",
    "Peach|üçë|Common","Plum|üçë|Common","Watermelon|üçâ|Common","Pineapple|üçç|Common","Mango|ü•≠|Common",
    "Kiwi|ü•ù|Common","Apricot|üçë|Common","Fig|üçà|Common","Coconut|ü••|Common","Papaya|üü†|Common",
    "Melon|üçà|Common","Pomegranate|ü•≠|Uncommon","Guava|üü†|Uncommon","Nectarine|üçë|Uncommon","Blackberry|ü´ê|Uncommon",
    "Raspberry|üçì|Uncommon","Cantaloupe|üçà|Uncommon","Honeydew|üçà|Uncommon","Dragonfruit|üêâ|Uncommon","Tomato|üçÖ|Uncommon",
    "Avocado|ü•ë|Uncommon","Olives|ü´í|Uncommon","Mango Slice|ü•≠|Uncommon","Persimmon|üçä|Uncommon","Jackfruit|üçà|Uncommon",
    "Durian|üü†|Uncommon","Starfruit|‚≠ê|Uncommon","Lychee|üßã|Uncommon","Passionfruit|üü£|Uncommon","Kumquat|üü†|Uncommon",
    "Bread|üçû|Common","Toast|üçû|Common","Bagel|ü•Ø|Common","Croissant|ü•ê|Common","Muffin|üßÅ|Common",
    "Pancakes|ü•û|Legendary","Waffles|üßá|Uncommon","French Toast|üçû|Common","Donut|üç©|Secret","Chocolate Cake|üç∞|Secret",
    "Brownie|üç´|Common","Cookie|üç™|Common","Ice Cream|üç®|Secret","Sundae|üç®|Secret","Gelato|üçß|Rare",
    "Yogurt|ü•£|Rare","Cheese|üßÄ|Rare","Butter|üßà|Common","Cream|ü•õ|Common","Custard|üçÆ|Rare",
    "Rice|üçö|Common","Fried Rice|üçö|Uncommon","Sushi|üç£|Uncommon","Onigiri|üçô|Uncommon","Noodles|üçú|Common",
    "Ramen|üçú|Uncommon","Udon|üçú|Common","Soba|üçú|Common","Pasta|üçù|Common","Spaghetti|üçù|Uncommon",
    "Lasagna|üçù|Uncommon","Pizza Slice|üçï|Uncommon","Calzone|ü•ü|Uncommon","Burger|üçî|Common","Cheeseburger|üçî|Rare",
    "Hot Dog|üå≠|Common","Taco|üåÆ|Uncommon","Burrito|üåØ|Common","Nachos|üßÄ|Uncommon","Quesadilla|üßÄ|Uncommon",
    "Fried Chicken|üçó|Common","Chicken Breast|üçó|Common","Kebab|üç¢|Common","Steak|ü•©|Rare","Meatball|üçñ|Uncommon",
    "Sausage|üå≠|Common","Bacon|ü•ì|Common","Ham|üçñ|Common","Salami|üßÄ|Common","Fish|üêü|Common",
    "Grilled Fish|üêü|Uncommon","Shrimp|üç§|Uncommon","Crab|ü¶Ä|Uncommon","Lobster|ü¶û|Rare","Clams|üêö|Uncommon",
    "Oysters|ü¶™|Rare","Scallops|ü¶™|Rare","Corn|üåΩ|Common","Boiled Corn|üåΩ|Common","Popcorn|üçø|Legendary",
    "Potato|ü•î|Common","French Fry|üçü|Legendary","Mashed Potato|ü•î|Common","Baked Potato|ü•î|Common","Tater Tots|üçü|Common",
    "Egg|ü•ö|Common","Fried Egg|üç≥|Rare","Omelette|üç≥|Common","Quiche|ü•ß|Rare","Porridge|ü•£|Common",
    "Oatmeal|ü•£|Common","Granola|ü•£|Common","Cereal|ü•£|Common","Honey|üçØ|Common","Jam|üçá|Common",
    "Peanut Butter|ü•ú|Common","Almonds|üå∞|Common","Walnuts|üå∞|Common","Pistachio|ü•ú|Rare","Cashews|ü•ú|Common",
    "Tofu|üç±|Common","Edamame|üü¢|Common","Tempeh|üü§|Common","Miso Soup|üçú|Common","Seaweed|üü©|Common",
    "Salad|ü•ó|Common","Caesar Salad|ü•ó|Uncommon","Greek Salad|ü•ó|Uncommon","Coleslaw|ü•ó|Common","Kimchi|üå∂Ô∏è|Uncommon",
    "Pickles|ü•í|Common","Salsa|üå∂Ô∏è|Uncommon","Guacamole|ü•ë|Uncommon","Hummus|ü•ô|Common","Falafel|üßÜ|Uncommon",
    "Stew|üç≤|Common","Curry|üçõ|Uncommon","Rice & Curry|üçõ|Uncommon","Biryani|üçö|Uncommon","Dumplings|ü•ü|Uncommon",
    "Bao|ü•ü|Uncommon","Porridge Savory|üç≤|Common","Crepe|ü•û|Common","Cr√™pe Sweet|ü•û|Common","Creme Brulee|üçÆ|Secret",
    "Tart|ü•ß|Rare","Pie|ü•ß|Common","Pumpkin Pie|ü•ß|Legendary","Apple Pie|ü•ß|Uncommon","Pecan Pie|ü•ß|Uncommon",
    "Scone|üç™|Common","Bag of Chips|üçü|Common","Pretzel|ü•®|Common","Garlic Bread|üçû|Common","Bruschetta|üçû|Uncommon",
    "Tapas|üçΩÔ∏è|Uncommon","Charcuterie|üßÄ|Uncommon","Wine|üç∑|Uncommon","Champagne|ü•Ç|Rare","Cocktail|üç∏|Uncommon",
    "Smoothie|ü•§|Uncommon","Milkshake|ü•§|Uncommon","Coffee|‚òï|Common","Espresso|‚òï|Common","Tea|üçµ|Common",
    "Latte|‚òï|Common","Matcha|üçµ|Uncommon","Chai|üçµ|Uncommon","Sake|üç∂|Uncommon","Beer|üç∫|Common",
    "Sausage Roll|ü•ê|Common","Empanada|ü•ü|Uncommon","Calamari|ü¶ë|Uncommon","Ratatouille|üç≤|Uncommon","Gnocchi|üçù|Uncommon",
    "Souvlaki|üç¢|Uncommon","Poke Bowl|ü•ó|Uncommon","Ceviche|üêü|Rare","Paella|üçö|Rare","Gumbo|üç≤|Uncommon",
    "Jambalaya|üç≤|Uncommon","Okonomiyaki|ü•û|Uncommon","Takoyaki|ü¶ë|Uncommon","Bibimbap|üçö|Uncommon","Kimchi Stew|üå∂Ô∏è|Uncommon",
    "Shawarma|ü•ô|Common","Gyro|ü•ô|Common","Poutine|üçü|Uncommon","Cottage Pie|ü•ß|Uncommon","Cornbread|üçû|Common",
    "Sausage & Mash|ü•ì|Common","Toffee|üç¨|Common","Nougat|üç¨|Secret","Marshmallow|üç°|Common","Toffee Apple|üçé|Uncommon",
    "Chocolate Truffle|üç´|Legendary","Golden Truffle|üçÑ|Legendary","Mystic Macaron|üßÅ|Secret","Celestial Sorbet|üçß|Mythic",
    "ULTRA Slushie|üßä|Secret","GOLDEN Nugget|ü™ô|Mythic","Secret Saffron Rice|üçö|Secret","Phantom Pudding|üçÆ|Secret",
    "Cosmic Creme Brulee|üçÆ|Secret","Royal Curry|üçõ|Mythic","Dragonfruit Tart|üêâ|Legendary","Arcane Dessert Duo|üîÆ|Secret",
    "Enchanted Eclair|ü•ê|Secret","Divine Doughnut|üç©|Secret","Frosted Freeze|‚ùÑÔ∏è|Secret","Forbidden Dessert|üç©|Secret",
    "Royal Pastry|‚ú®|Secret","Choco-Pancake Stack|üßÅ|Uncommon","Frosty Fry|üçü|Uncommon","Happy Meal|üéÅ|Uncommon",
    // Add filler common world cuisines and snacks until ~200
    "Tostada|üåÆ|Common","Samosa|ü•ü|Common","Momos|ü•ü|Common","Pav Bhaji|üçõ|Uncommon","Dosa|ü•û|Uncommon",
    "Idli|üçö|Common","Vada|üç©|Common","Kebab Skewer|üç¢|Common","Banh Mi|ü•ñ|Uncommon","Pho|üçú|Uncommon",
    "Congee|üçö|Common","Tamale|üåΩ|Common","Arepa|üåΩ|Common","Empanada Beef|ü•ü|Uncommon","Chili|üå∂Ô∏è|Common",
    "Haggis|üçΩÔ∏è|Rare","Pierogi|ü•ü|Uncommon","Goulash|üç≤|Uncommon","Katsu|üç±|Uncommon","Okra|ü•¨|Common",
    "Beetroot Salad|ü•ó|Common","Rye Bread|üçû|Common","Sourdough|üçû|Common","Ciabatta|üçû|Common","Focaccia|üçû|Common",
    "Truffle Risotto|üçö|Legendary","Baklava|üç∞|Uncommon","Kunafa|üç∞|Uncommon","Mooncake|ü•Æ|Uncommon","Sichuan Noodles|üçú|Uncommon",
    "Mapo Tofu|üç≤|Uncommon","Carbonara|üçù|Uncommon","Bolognese|üçù|Uncommon","Tiramisu|‚òï|Rare","Panna Cotta|üçÆ|Rare",
    "Gelatin|üçÆ|Common","Lollipop|üç≠|Common","Sushi Roll|üç£|Uncommon","Nigiri|üç£|Uncommon","Maki|üç£|Uncommon",
    "Tempura|üç§|Uncommon","Okra Curry|üçõ|Common","Sesame Ball|üç°|Common","Moonshine|ü•É|Rare","Coconut Rice|üçö|Common",
    "Mango Sticky Rice|ü•≠|Uncommon","Coconut Curry|ü••|Uncommon","Thai Green Curry|üçõ|Rare","Pad Thai|üçú|Uncommon",
    "Laksa|üçú|Uncommon","Malai Kofta|üçõ|Uncommon","Chaat|ü•™|Common","Bhel Puri|üçö|Common","Pavlova|üç∞|Rare",
    "Custard Tart|ü•ß|Uncommon","Corn Pudding|üåΩ|Common","Brown Butter|üßà|Common","Clarified Butter|üßà|Common","Ghee|üßà|Common",
    // NEW INTERNATIONAL FOODS
    "Dim Sum|ü•ü|Uncommon","Jollof Rice|üçö|Rare","Arepa|ü´ì|Uncommon","Baklava|üçØ|Rare","Chow Mein|üçú|Uncommon",
    "Doner Kebab|ü•ô|Uncommon","Dumpling Soup|ü•ü|Uncommon","Tiramisu|üç∞|Rare","Plantain Chips|üçå|Common","Moqueca|ü•ò|Rare",
    "Lobster Roll|ü¶û|Legendary","Haggis|ü•©|Rare",
    // NEW DRINKS
    "Thai Iced Tea|üßã|Uncommon","Boba Milk Tea|üßã|Uncommon","Horchata|ü•õ|Uncommon","Mojito|üçπ|Uncommon","Mate Tea|üçµ|Uncommon",
    "Caipirinha|üçπ|Uncommon","Pi√±a Colada|üçç|Rare","Bubble Coffee|‚òï|Uncommon","Agua Fresca|ü•§|Common",
    // NEW MYTHIC/SECRET FOODS
    "Phoenix Egg Soup|üî•|Secret","Leviathan Sushi Roll|üêâ|Secret","Ambrosia Cake|üçá|Mythic","Elven Bread|üåø|Secret",
    "Dragonfruit Cocktail|üê≤|Secret","Golden Noodle|üçú|Secret","Spirit Dumpling|üëª|Secret","Cloud Cotton Candy|‚òÅÔ∏è|Mythic",
    "Eternal Chocolate|üç´|Secret","Cosmic Pizza|üåå|Secret",
    // MORE INTERNATIONAL FOODS
    "Fish and Chips|üçü|Common","Shepherd's Pie|ü•ß|Uncommon","Bangers and Mash|üå≠|Common","Yorkshire Pudding|üçÆ|Uncommon",
    "Coq au Vin|üç∑|Rare","Ratatouille|üçÜ|Uncommon","Bouillabaisse|üç≤|Rare","Escargot|üêå|Rare",
    "Paella|ü•ò|Rare","Gazpacho|üçÖ|Uncommon","Tapas|üç§|Uncommon","Churros|üç©|Common",
    "Schnitzel|ü•©|Uncommon","Bratwurst|üå≠|Common","Sauerkraut|ü•¨|Common","Black Forest Cake|üç∞|Legendary",
    "Risotto|üçö|Uncommon","Osso Buco|üçñ|Rare","Gelato|üç®|Uncommon","Cannoli|ü•ê|Uncommon",
    "Sashimi|üç£|Rare","Tempura|üç§|Uncommon","Miso Ramen|üçú|Uncommon","Katsu Curry|üçõ|Uncommon",
    "Kimchi Fried Rice|üçö|Uncommon","Bulgogi|ü•©|Uncommon","Korean BBQ|ü•ì|Uncommon","Hotteok|ü•û|Common",
    "Tom Yum|üç≤|Uncommon","Som Tam|ü•ó|Common","Mango Sticky Rice|ü•≠|Uncommon","Pad See Ew|üçú|Common",
    "Pho Bo|üçú|Uncommon","Banh Xeo|ü•û|Common","Vietnamese Spring Rolls|ü•ó|Common","Ca Phe Sua Da|‚òï|Common",
    "Rendang|üçõ|Rare","Nasi Goreng|üçö|Common","Satay|üç¢|Common","Gado Gado|ü•ó|Common",
    // MORE DESSERTS & SWEETS
    "Macarons|üç™|Rare","Opera Cake|üç∞|Legendary","Mille-feuille|ü•ê|Rare","Profiteroles|üßÅ|Uncommon",
    "Tres Leches|üç∞|Uncommon","Flan|üçÆ|Uncommon","Dulce de Leche|üçØ|Common","Alfajores|üç™|Common",
    "Gulab Jamun|üç°|Uncommon","Rasgulla|üç°|Common","Kulfi|üç®|Uncommon","Jalebi|üçØ|Common",
    "Mochi Ice Cream|üç°|Rare","Dorayaki|ü•û|Common","Taiyaki|üêü|Uncommon","Melon Pan|üçà|Common",
    // MORE STREET FOODS
    "Corn Dog|üå≠|Common","Funnel Cake|üç∞|Uncommon","Cotton Candy|üç≠|Common","Kettle Corn|üçø|Common",
    "Beignets|üç©|Uncommon","Po'boy|ü•ñ|Common","Jambalaya|üçö|Uncommon","Gumbo|üç≤|Uncommon",
    "Elote|üåΩ|Common","Tostada|üåÆ|Common","Quesadilla|üßÄ|Common","Torta|ü•™|Common",
    "Patty|üçî|Common","Jerk Chicken|üçó|Uncommon","Plantain|üçå|Common","Doubles|ü•™|Common",
    // SPECIALTY DRINKS
    "Lassi|ü•õ|Common","Chai Latte|‚òï|Uncommon","Turkish Coffee|‚òï|Uncommon","Greek Frappe|‚òï|Common",
    "Bubble Tea|üßã|Common","Matcha Latte|üçµ|Uncommon","Vietnamese Iced Coffee|‚òï|Common","Masala Chai|üçµ|Common"
  ];
  // Expand to numbered entries and parse tokens
  const items = [];
  for(let i=0;i<list.length;i++){
    const [name,emoji,rarity] = list[i].split('|');
    const num = String(i+1).padStart(3,'0');
    items.push({ id: num, name: `${num} ${name}`, emoji: emoji||'üçΩÔ∏è', rarity: rarity||'Common' });
  }
  return items;
})();

/* tuned base rarity weights for common/uncommon/rare/legendary (used when special checks fail) */
const RARITY_BASE = { Common:1.0, Uncommon:0.45, Rare:0.08, Legendary:0.012 };

/* Mythic & Secret absolute odds (as requested) */
const ABS_ODDS = {
  mythic: 1/9000,   // ~0.000111...
  secret: 1/10000   // 0.0001
};
/* mythic pity and secret pity thresholds */
const PITY = { mythic: 9000, secret: 10000 };

/* build per-rarity counts */
const BY_RARITY = {};
ITEMS.forEach(it => BY_RARITY[it.rarity] = (BY_RARITY[it.rarity]||0)+1);

/* names & helper weights for fallback pick */
const ITEM_NAMES = ITEMS.map(i=>i.name);

/* ============================
   combos (20) + descriptions
   ============================ */
const COMBOS = [
  {req:["001 Apple","050 Chocolate Cake"], result:"Caramel Apple", achievement:"üçé Fairground Treat", desc:"A sweet caramel coating for apples."},
  {req:["002 Banana","036 Yogurt","006 Strawberry"], result:"Smoothie Bowl", achievement:"ü•§ Health Nut", desc:"Fruit blend topped with granola."},
  {req:["010 Pineapple","064 Pizza Slice"], result:"Hawaiian Pizza", achievement:"üçç Controversial Pick", desc:"Pineapple with melty cheese."},
  {req:["084 Pancakes","050 Chocolate Cake"], result:"Choco-Pancake Stack", achievement:"üßÅ Sweet Stack", desc:"Pancakes layered with cake."},
  {req:["069 French Fry","127 ULTRA Slushie"], result:"Frosty Fry", achievement:"‚ùÑÔ∏è Chill Snack", desc:"Cold slushie + hot fries."},
  {req:["020 Mango","002 Banana","056 Coconut"], result:"Tropical Medley", achievement:"üå¥ Island Hopper", desc:"A fruity island dessert."},
  {req:["033 Cheese","001 Apple"], result:"Apple & Cheese Plate", achievement:"üßÄ Sophisticated Snack", desc:"Cheese and apple pairing."},
  {req:["053 Rice","143 Golden Truffle"], result:"Truffle Risotto", achievement:"üíé Haute Cuisine", desc:"Luxury mushroom truffle risotto."},
  {req:["012 Pear","011 Grapes"], result:"Fruit Platter", achievement:"üçΩ Platter Pro", desc:"A simple fruit assortment."},
  {req:["040 Pancakes","052 Honey"], result:"Honey Pancakes", achievement:"üçØ Sweet Morning", desc:"Fluffy pancakes drizzled with honey."},
  {req:["150 ULTRA Slushie","069 French Fry"], result:"Slush & Fry Combo", achievement:"üçü Slushy Combo", desc:"Fast food fusion."},
  {req:["121 Donut","050 Chocolate Cake"], result:"Frosted Choco Donut", achievement:"üç© Centrifuge", desc:"Donut and cake collide."},
  {req:["028 Garlic Bread","025 Tomato"], result:"Bruschetta", achievement:"üçû Italian Starter", desc:"Toasted bread with tomato & garlic."},
  {req:["072 Sushi","033 Cheese"], result:"Spicy Cheese Roll", achievement:"üç£ Fusion Roll", desc:"Unexpected savory roll."},
  {req:["045 Fried Rice","143 Golden Truffle"], result:"Truffle Rice", achievement:"üíé Rich Rice", desc:"Truffle fragrance in rice."},
  {req:["139 DIVINE DOUGHNUT","121 Donut"], result:"Divine Stack", achievement:"‚ú® Pastry Prince", desc:"A stack of divine pastries."},
  {req:["033 Cheese","005 Bread"], result:"Cheese Toast", achievement:"üßÄ Toasty Bite", desc:"Classic cheesy toast."},
  {req:["020 Mango","010 Pineapple"], result:"Mango Pine Parfait", achievement:"ü•≠ Sunny Parfait", desc:"Layered tropical parfait."},
  {req:["144 Celestial Sorbet","043 Ice Cream"], result:"Astral Sundae", achievement:"üåå Starlit Chef", desc:"Sundae with cosmic sorbet."},
  {req:["133 Golden Truffle","143 Golden Truffle"], result:"Double Truffle", achievement:"üíé Truffle Overload", desc:"Two truffles make magic."},
  // NEW USER COMBOS
  {req:["Jollof Rice","Plantain Chips"], result:"West African Feast", achievement:"üåç African Fusion", desc:"Traditional Nigerian rice with plantains."},
  {req:["Boba Milk Tea","Thai Iced Tea"], result:"Asian Tea Fusion", achievement:"üßã Tea Master", desc:"Two tea cultures combined."},
  {req:["Phoenix Egg Soup","Elven Bread"], result:"Mystical Meal", achievement:"üîÆ Fantasy Chef", desc:"Legendary foods from ancient realms."},
  {req:["Mojito","Pi√±a Colada"], result:"Tropical Paradise", achievement:"üèñÔ∏è Beach Vibes", desc:"Ultimate vacation drink combo."},
  {req:["Dim Sum","Doner Kebab"], result:"East Meets West", achievement:"ü•ü Cultural Bridge", desc:"Asian and Turkish fusion."}
];

/* ============================
   achievements (20+) with checks
   ============================ */
const ACHIEVEMENTS = [
  {id:"collect10", title:"Fruit Collector I", desc:"Collect 10 different foods", tip:"Keep rolling! You'll get 10 different foods naturally as you play.", check:(s)=> s.foodDex.size>=10, reward:{extraRolls:0}},
  {id:"collect25", title:"Fruit Collector II", desc:"Collect 25 different foods", tip:"Continue rolling to expand your collection. Each new food counts!", check:(s)=> s.foodDex.size>=25, reward:{extraRolls:1}},
  {id:"collect50", title:"Collector", desc:"Collect 50 different foods", tip:"You're halfway to being a food master! Keep rolling for more variety.", check:(s)=> s.foodDex.size>=50, reward:{extraRolls:2}},
  {id:"rare3", title:"üç≥ Rare Collector", desc:"Collect 3 rare items", tip:"Look for blue-highlighted rare foods like Lobster, Tiramisu, and Jollof Rice!", check:(s)=> ITEMS.filter(i=>i.rarity==='Rare').map(i=>i.name).filter(n=> s.foodDex.has(n)).length>=3, reward:{}},
  {id:"legendary1", title:"üåü Legendary Find", desc:"Pull any Legendary item", tip:"Legendary foods are very rare! Look for golden items like Pancakes, French Fries, or Lobster Roll.", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Legendary')), reward:{extraRolls:1}},
  {id:"secret1", title:"‚ú® Secret Seeker", desc:"Find any Secret item", tip:"Secret foods have rainbow colors! Try rolling many times - pity system helps after 10,000 rolls.", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Secret')), reward:{}},
  {id:"mythic1", title:"üåå Mythic Hunter", desc:"Obtain a Mythic item", tip:"Mythic foods are ultra-rare! Look for fantasy items like Ambrosia Cake or Cloud Cotton Candy.", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Mythic')), reward:{extraRolls:2}},
  {id:"combo1", title:"üß© Combo Starter", desc:"Complete 1 combo", tip:"Check the Combos tab! Get ingredients like Apple + Chocolate Cake to make combos.", check:(s)=> s.completedCombos.size>=1, reward:{}},
  {id:"combo5", title:"üß© Combo Apprentice", desc:"Complete 5 combos", tip:"Mix different foods! Try combinations like Cheese + Bread, or Mango + Pineapple.", check:(s)=> s.completedCombos.size>=5, reward:{extraRolls:1}},
  {id:"golden_bg", title:"üëë Golden Unlock", desc:"Obtain GOLDEN Nugget to unlock Gold background", tip:"GOLDEN Nugget is a mythic item! Keep rolling - it unlocks special golden theme.", check:(s)=> [...s.foodDex].some(n=> n.includes("GOLDEN Nugget")), reward:{}},
  {id:"dexMaster", title:"üçΩ Master Chef", desc:"Collect all foods & combos", tip:"The ultimate challenge! Collect every single food and complete every combo recipe.", check:(s)=>{
    const totalFoods = ITEMS.length + COMBOS.length;
    const known = s.foodDex.size + s.completedCombos.size;
    return known>=totalFoods;
  }, reward:{extraRolls:5}},
  // More filler achievements...
  {id:"snacklover", title:"üçø Snack Lover", desc:"Collect 20 snack items", tip:"Roll for snacks and treats! Any food counts towards your collection.", check:(s)=> s.foodDex.size>=20, reward:{}},
  {id:"baker", title:"ü•ê Baker", desc:"Collect 8 bakery items", tip:"Look for foods with 'cake', 'donut', or 'pancake' in the name!", check:(s)=> ITEMS.filter(i=> i.name.toLowerCase().includes('cake') || i.name.toLowerCase().includes('donut') || i.name.toLowerCase().includes('pancake')).filter(i=> s.foodDex.has(i.name)).length>=1, reward:{}},
  {id:"global", title:"üåç World Taster", desc:"Collect foods from 10 different cuisines", tip:"Try international foods! Look for dishes from different countries and cultures.", check:(s)=> s.foodDex.size>=30, reward:{}},
  {id:"firstPull", title:"üéâ First Pull", desc:"Make your first pull", tip:"Click the 'üé≤ Roll 1' button to make your first roll!", check:(s)=> s.pulls>=1, reward:{extraRolls:0}},
  {id:"historyCollector", title:"üïò Historian", desc:"Keep 100 items in history", tip:"Keep rolling! Your pull history will grow automatically as you play.", check:(s)=> s.history.length>=100, reward:{}},
  {id:"lucky100", title:"üçÄ Lucky Hundred", desc:"Make 100 pulls", tip:"Keep clicking that roll button! Every pull counts towards this achievement.", check:(s)=> s.pulls>=100, reward:{extraRolls:2}},
  {id:"devUnlocked", title:"üõ†Ô∏è Dev Friend", desc:"Enable Dev Mode", tip:"Go to Stats/Dev tab and check 'Enable Developer Mode' to unlock dev tools.", check:(s)=> s.devEnabled, reward:{}},
  // NEW USER ACHIEVEMENTS
  {id:"rareBite", title:"üç≥ Rare Bite", desc:"Get your first rare item", tip:"Rare foods appear in blue! Look for items like Steak, Oysters, or Baklava.", check:(s)=> [...s.foodDex].some(n=> ITEMS.find(it=>it.name===n && it.rarity==='Rare')), reward:{extraRolls:1}},
  {id:"legendaryChef", title:"‚≠ê Legendary Chef", desc:"Unlock 3 legendary foods", tip:"Legendary foods are golden! Try to get Pancakes, French Fries, and Lobster Roll.", check:(s)=> ITEMS.filter(i=>i.rarity==='Legendary').map(i=>i.name).filter(n=> s.foodDex.has(n)).length>=3, reward:{extraRolls:2}},
  {id:"doubleLuck", title:"üçÄ Double Luck", desc:"Roll the same food twice in a row", tip:"Pure luck! Keep rolling and eventually you'll get the same food twice in a row.", check:(s)=> s.history.length>=2 && s.history[0].name===s.history[1].name, reward:{extraRolls:1}},
  {id:"worldTour", title:"üåç World Tour", desc:"Collect foods from around the world", tip:"Collect 40 different foods! Try international cuisines like Dim Sum, Paella, and Jollof Rice.", check:(s)=> s.foodDex.size>=40, reward:{extraRolls:1}},
  {id:"foodGod", title:"üëë Food God", desc:"Collect all secret foods", tip:"The ultimate challenge! Find every rainbow-colored secret food in the game.", check:(s)=> ITEMS.filter(i=>i.rarity==='Secret').map(i=>i.name).every(n=> s.foodDex.has(n)), reward:{extraRolls:5}},
  {id:"epicurean", title:"üçΩÔ∏è Epicurean", desc:"Unlock 75 different foods", tip:"You're becoming a true food expert! Keep rolling to expand your culinary knowledge.", check:(s)=> s.foodDex.size>=75, reward:{extraRolls:3}},
  {id:"mythicCollector", title:"üåå Mythic Master", desc:"Collect all mythic foods", tip:"Find all mythic items like Ambrosia Cake, Cloud Cotton Candy, and GOLDEN Nugget!", check:(s)=> ITEMS.filter(i=>i.rarity==='Mythic').map(i=>i.name).every(n=> s.foodDex.has(n)), reward:{extraRolls:10}},
  // MORE THEMED ACHIEVEMENTS
  {id:"streetFoodie", title:"üöö Street Foodie", desc:"Collect 15 street foods", tip:"Get 35 different foods total! Street foods include Corn Dogs, Elote, and Food Truck favorites.", check:(s)=> s.foodDex.size>=35, reward:{extraRolls:1}},
  {id:"sweetTooth", title:"üç≠ Sweet Tooth", desc:"Collect 10 desserts and sweets", tip:"Look for foods with 'cake', 'ice cream', or 'cookie' in their names!", check:(s)=> ITEMS.filter(i=> i.name.toLowerCase().includes('cake') || i.name.toLowerCase().includes('ice cream') || i.name.toLowerCase().includes('cookie')).filter(i=> s.foodDex.has(i.name)).length>=3, reward:{extraRolls:1}},
  {id:"worldTraveler", title:"‚úàÔ∏è World Traveler", desc:"Collect foods from 8 different continents", tip:"Explore global cuisines! Get 50 different foods from around the world.", check:(s)=> s.foodDex.size>=50, reward:{extraRolls:2}},
  {id:"drinkConnoisseur", title:"üçπ Drink Master", desc:"Collect 12 different beverages", tip:"Find drinks with 'tea', 'coffee', or 'latte' in their names! Try Boba Tea, Mojito, Horchata.", check:(s)=> ITEMS.filter(i=> i.name.toLowerCase().includes('tea') || i.name.toLowerCase().includes('coffee') || i.name.toLowerCase().includes('latte')).filter(i=> s.foodDex.has(i.name)).length>=2, reward:{extraRolls:1}},
  {id:"fantasyFeast", title:"üêâ Fantasy Feast", desc:"Collect all mythical foods", tip:"Find fantasy foods: Phoenix Egg Soup, Leviathan Sushi Roll, Elven Bread, and Spirit Dumpling!", check:(s)=> ['Phoenix Egg Soup','Leviathan Sushi Roll','Elven Bread','Spirit Dumpling'].some(n=> [...s.foodDex].some(name=> name.includes(n))), reward:{extraRolls:3}},
  {id:"culturalExplorer", title:"üåè Cultural Explorer", desc:"Try foods from Asia, Europe, Africa, and Americas", tip:"Collect 60 different foods from diverse cultures and continents!", check:(s)=> s.foodDex.size>=60, reward:{extraRolls:2}},
  {id:"rareCollector", title:"üíé Rare Collection", desc:"Collect 8 rare items", tip:"Blue rare foods include: Tiramisu, Bouillabaisse, Black Forest Cake, and more!", check:(s)=> ITEMS.filter(i=>i.rarity==='Rare').map(i=>i.name).filter(n=> s.foodDex.has(n)).length>=8, reward:{extraRolls:2}},
  {id:"comboMaster", title:"üß© Combo Master", desc:"Complete 10 different combos", tip:"Check Combos tab for recipes! Mix ingredients like Jollof Rice + Plantain Chips.", check:(s)=> s.completedCombos.size>=10, reward:{extraRolls:3}},
  {id:"epicGourmet", title:"üåü Epic Gourmet", desc:"Collect 100 different foods", tip:"A major milestone! You're becoming a true culinary master with 100 foods.", check:(s)=> s.foodDex.size>=100, reward:{extraRolls:5}},
  {id:"ultimateFoodie", title:"üëë Ultimate Foodie", desc:"Master of all cuisines - collect 150 foods", tip:"The ultimate achievement! Master every cuisine and collect 150+ different foods.", check:(s)=> s.foodDex.size>=150, reward:{extraRolls:10}},
  {id:"luckStreak", title:"üçÄ Lucky Streak", desc:"Get 3 rare or higher items in 10 pulls", tip:"You need some luck! Try to get 3 blue, golden, rainbow, or mythic items in your last 10 rolls.", check:(s)=> s.history.slice(0,10).filter(h=> ['Rare','Legendary','Secret','Mythic'].includes(h.rarity)).length>=3, reward:{extraRolls:2}},
  {id:"midnightSnack", title:"üåô Midnight Snacker", desc:"Roll for food late at night", tip:"Roll any time of day! This unlocks automatically when you make your first pull.", check:(s)=> s.pulls>=1, reward:{}},
  // SHINY FOOD ACHIEVEMENTS
  {id:"firstShiny", title:"‚ú® First Sparkle", desc:"Find your first shiny variant food", tip:"Shiny foods have a 5% chance! Keep rolling and you'll find one sparkling!", check:(s)=> s.shinyFoods.size>=1, reward:{extraRolls:1}},
  {id:"shinyCollector", title:"‚ú® Shiny Hunter", desc:"Collect 5 different shiny foods", tip:"Keep rolling! Any food can be shiny - you need 5 different sparkling foods.", check:(s)=> s.shinyFoods.size>=5, reward:{extraRolls:2}},
  {id:"shinyMaster", title:"‚ú® Sparkle Master", desc:"Collect 10 different shiny foods", tip:"The ultimate shiny collector! Get 10 different foods in their sparkling variants.", check:(s)=> s.shinyFoods.size>=10, reward:{extraRolls:5}}
];

/* ============================
   state & persistence
   ============================ */
const STORAGE_KEY = "ultimate_food_game_all_in_one_final_v1";
let state = {
  inventory: {},
  foodDex: new Set(),
  achievements: new Set(),
  completedCombos: new Set(),
  pulls: 0,
  pityMythic: 0,
  pitySecret: 0,
  extraRolls: 0,
  history: [],
  firstObtainedAt: {}, // name -> timestamp
  devEnabled: false,
  goldenUnlocked: false,
  // NEW OFFLINE & GAMEPLAY FEATURES
  shinyFoods: new Set(), // tracks shiny variant foods
  energy: 100, // energy/stamina system (max 100)
  lastEnergyUpdate: null, // for offline energy regeneration
  dailyRewardDate: null, // tracks daily reward claims
  emergencyFridge: 0, // bonus rolls when offline
  fusionUnlocks: new Set(), // custom fusion combinations
  localLeaderboard: [], // offline personal bests
  offlineTime: 0, // time spent offline
  // Emergency Fridge & Offline Detection
  isOfflineMode: false,
  lastOnlineTime: Date.now(),
  offlineStartTime: null,
  // Reaction Time Leaderboard
  reactionLeaderboard: [],
  
  // ‚öôÔ∏è ULTIMATE SETTINGS SYSTEM
  settings: {
    // 1. General Settings
    soundEnabled: true,
    musicEnabled: true,
    animationsEnabled: true,
    soundVolume: 70,
    musicVolume: 50,
    uiScale: 100, // percentage
    
    // 2. Mobile Mode
    mobileMode: false,
    oneHandMode: 'center', // 'left', 'center', 'right'
    swipeNavigation: false,
    compactDexMode: false,
    offlineCaching: true,
    
    // 3. Offline Mode
    offlineRolls: true,
    offlineAchievements: true,
    offlineDexAccess: true,
    emergencyFridgeEnabled: true,
    autoSync: true,
    
    // 4. Customization
    backgroundTheme: 'default', // 'default', 'jojo', 'anime', 'fantasy', etc.
    themeMode: 'auto', // 'light', 'dark', 'auto'
    floatingEmojis: true,
    dexLayout: 'grid', // 'grid', 'list'
    foodVariants: true,
    
    // 5. Performance
    lowPowerMode: false,
    dataSaver: false,
    fpsLimit: 60, // 30 or 60
    autoSaveInterval: 30, // seconds
    
    // 6. Extra Fun
    dailyLoginRewards: true,
    miniGamesEnabled: true,
    experimentalFeatures: false,
    mysteryBackgroundMode: false,
    hiddenCodesEnabled: true
  }
};
let speedMode = false;
let clock24 = false;

/* load/save */
function saveState(){
  const obj = {
    inventory: state.inventory,
    foodDex: [...state.foodDex],
    achievements: [...state.achievements],
    completedCombos: [...state.completedCombos],
    pulls: state.pulls,
    pityMythic: state.pityMythic,
    pitySecret: state.pitySecret,
    extraRolls: state.extraRolls,
    history: state.history,
    firstObtainedAt: state.firstObtainedAt,
    devEnabled: state.devEnabled,
    goldenUnlocked: state.goldenUnlocked,
    // NEW FEATURES
    shinyFoods: [...state.shinyFoods],
    energy: state.energy,
    lastEnergyUpdate: state.lastEnergyUpdate,
    dailyRewardDate: state.dailyRewardDate,
    emergencyFridge: state.emergencyFridge,
    fusionUnlocks: [...state.fusionUnlocks],
    localLeaderboard: state.localLeaderboard,
    offlineTime: state.offlineTime,
    reactionLeaderboard: state.reactionLeaderboard,
    // Ultimate Settings
    settings: state.settings
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(obj));
  localStorage.setItem('dev_mode_enabled_final', state.devEnabled? '1':'0');
  localStorage.setItem('clock_format_24_final', clock24? '1':'0');
  document.getElementById('bgOpacity') && document.getElementById('bgOpacity').dispatchEvent(new Event('input'));
}
function loadState(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(raw){
      const p = JSON.parse(raw);
      state.inventory = p.inventory || {};
      state.foodDex = new Set(p.foodDex || []);
      state.achievements = new Set(p.achievements || []);
      state.completedCombos = new Set(p.completedCombos || []);
      state.pulls = p.pulls || 0;
      state.pityMythic = p.pityMythic || 0;
      state.pitySecret = p.pitySecret || 0;
      state.extraRolls = p.extraRolls || 0;
      state.history = p.history || [];
      state.firstObtainedAt = p.firstObtainedAt || {};
      state.devEnabled = p.devEnabled || false;
      state.goldenUnlocked = p.goldenUnlocked || false;
      // NEW FEATURES
      state.shinyFoods = new Set(p.shinyFoods || []);
      state.energy = p.energy || 100;
      state.lastEnergyUpdate = p.lastEnergyUpdate || Date.now();
      state.dailyRewardDate = p.dailyRewardDate;
      state.emergencyFridge = p.emergencyFridge || 0;
      state.fusionUnlocks = new Set(p.fusionUnlocks || []);
      state.localLeaderboard = p.localLeaderboard || [];
      state.offlineTime = p.offlineTime || 0;
      state.reactionLeaderboard = p.reactionLeaderboard || [];
      // Ultimate Settings (with defaults)
      state.settings = Object.assign({
        soundEnabled: true, musicEnabled: true, animationsEnabled: true,
        soundVolume: 70, musicVolume: 50, uiScale: 100,
        mobileMode: false, oneHandMode: 'center', swipeNavigation: false,
        compactDexMode: false, offlineCaching: true,
        offlineRolls: true, offlineAchievements: true, offlineDexAccess: true,
        emergencyFridgeEnabled: true, autoSync: true,
        backgroundTheme: 'default', themeMode: 'auto', floatingEmojis: true,
        dexLayout: 'grid', foodVariants: true,
        lowPowerMode: false, dataSaver: false, fpsLimit: 60, autoSaveInterval: 30,
        dailyLoginRewards: true, miniGamesEnabled: true, experimentalFeatures: false,
        mysteryBackgroundMode: false, hiddenCodesEnabled: true
      }, p.settings || {});
    }
    // persist dev flag
    const dv = localStorage.getItem('dev_mode_enabled_final')==='1';
    state.devEnabled = state.devEnabled || dv;
    clock24 = localStorage.getItem('clock_format_24_final') === '1';
    document.getElementById('devEnableCheckbox') && (document.getElementById('devEnableCheckbox').checked = state.devEnabled);
    document.getElementById('devControls') && (document.getElementById('devControls').style.display = state.devEnabled ? 'block':'none');
  }catch(e){ console.error(e); }
}

/* ============================
   helpers: find, time, weighted fallback
   ============================ */
function findItem(name){ return ITEMS.find(i=>i.name===name) || null; }
function nowISO(){ return (new Date()).toISOString(); }
function formatTime(fmt24){
  const d = new Date();
  if(fmt24){
    const hh = String(d.getHours()).padStart(2,'0'), mm=String(d.getMinutes()).padStart(2,'0'), ss=String(d.getSeconds()).padStart(2,'0');
    return `${hh}:${mm}:${ss}`;
  } else {
    let h = d.getHours();
    const am = h < 12;
    h = h % 12 || 12;
    const hh = String(h), mm=String(d.getMinutes()).padStart(2,'0'), ss=String(d.getSeconds()).padStart(2,'0');
    return `${hh}:${mm}:${ss} ${am? 'AM':'PM'}`;
  }
}
/* ============================
   DAILY REWARD CLOCK SYSTEM
   ============================ */
function checkDailyReward() {
  const today = new Date().toDateString(); // e.g., "Mon Dec 25 2023"
  const lastRewardDate = state.dailyRewardDate;
  
  if(lastRewardDate !== today) {
    // New day! Give daily rewards
    state.dailyRewardDate = today;
    
    // Calculate consecutive days (rough estimate)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const wasYesterday = lastRewardDate === yesterday.toDateString();
    
    // Daily rewards: energy + extra rolls
    const energyReward = 50;
    const rollReward = wasYesterday ? 3 : 1; // bonus for consecutive days
    
    state.energy = Math.min(100, state.energy + energyReward);
    state.extraRolls += rollReward;
    
    const streakText = wasYesterday ? " (Consecutive day bonus!)" : "";
    log(`üéÅ Daily Reward! +${energyReward} Energy, +${rollReward} Extra Rolls${streakText}`, 'legendary');
    createConfetti(60);
    
    return true; // claimed reward today
  }
  return false; // already claimed today
}

function getDailyRewardStatus() {
  const today = new Date().toDateString();
  const claimed = state.dailyRewardDate === today;
  const now = new Date();
  const nextMidnight = new Date(now);
  nextMidnight.setDate(nextMidnight.getDate() + 1);
  nextMidnight.setHours(0, 0, 0, 0);
  const hoursUntilReset = Math.ceil((nextMidnight - now) / (1000 * 60 * 60));
  
  return {
    claimed,
    hoursUntilReset,
    canClaim: !claimed
  };
}

/* ============================
   COOKING FUSION SYSTEM
   ============================ */
function generateFusionName(food1, food2) {
  // Create unique fusion names by combining foods creatively
  const prefixes = ['Super', 'Ultra', 'Mega', 'Divine', 'Cosmic', 'Fusion', 'Hybrid', 'Golden'];
  const suffixes = ['Delight', 'Supreme', 'Burst', 'Blast', 'Wonder', 'Dream', 'Magic', 'Fusion'];
  
  const item1 = findItem(food1);
  const item2 = findItem(food2);
  if(!item1 || !item2) return null;
  
  // Use higher rarity to determine fusion strength
  const rarities = ['Common', 'Uncommon', 'Rare', 'Legendary', 'Mythic', 'Secret'];
  const rarity1Level = rarities.indexOf(item1.rarity);
  const rarity2Level = rarities.indexOf(item2.rarity);
  const maxRarity = Math.max(rarity1Level, rarity2Level);
  
  // Generate fusion name based on rarity levels
  const prefix = prefixes[Math.min(maxRarity, prefixes.length-1)];
  const suffix = suffixes[Math.min(maxRarity, suffixes.length-1)];
  
  // Combine food names creatively
  const word1 = food1.split(' ').pop(); // get last word
  const word2 = food2.split(' ').pop(); // get last word
  
  return `${prefix} ${word1}-${word2} ${suffix}`;
}

function attemptFusion(food1, food2) {
  if(!state.inventory[food1] || !state.inventory[food2]) {
    return { success: false, message: "‚ùå Missing ingredients for fusion!" };
  }
  
  if(food1 === food2) {
    return { success: false, message: "‚ùå Cannot fuse identical foods!" };
  }
  
  // Generate unique fusion result
  const fusionName = generateFusionName(food1, food2);
  if(!fusionName) {
    return { success: false, message: "‚ùå These foods cannot be fused!" };
  }
  
  // Check if already discovered this fusion
  const fusionKey = [food1, food2].sort().join(' + ');
  const alreadyKnown = state.fusionUnlocks.has(fusionKey);
  
  // Fusion success chance based on rarity levels
  const item1 = findItem(food1);
  const item2 = findItem(food2);
  const rarities = ['Common', 'Uncommon', 'Rare', 'Legendary', 'Mythic', 'Secret'];
  const avgRarity = (rarities.indexOf(item1.rarity) + rarities.indexOf(item2.rarity)) / 2;
  const successChance = 0.6 + (avgRarity * 0.05); // Higher rarity = better success
  
  if(Math.random() > successChance) {
    // Fusion failed but still consume ingredients
    state.inventory[food1]--;
    state.inventory[food2]--;
    if(state.inventory[food1] <= 0) delete state.inventory[food1];
    if(state.inventory[food2] <= 0) delete state.inventory[food2];
    
    return { success: false, message: "üí• Fusion failed! Ingredients were consumed." };
  }
  
  // Successful fusion!
  state.inventory[food1]--;
  state.inventory[food2]--;
  if(state.inventory[food1] <= 0) delete state.inventory[food1];
  if(state.inventory[food2] <= 0) delete state.inventory[food2];
  
  // Add fusion result
  state.inventory[fusionName] = (state.inventory[fusionName] || 0) + 1;
  state.foodDex.add(fusionName);
  state.fusionUnlocks.add(fusionKey);
  
  // Track in history
  state.history.unshift({
    ts: new Date().toISOString(), 
    name: fusionName, 
    rarity: 'Fusion', 
    display: `üß™ ${fusionName}`,
    isFusion: true
  });
  
  const discoveryText = alreadyKnown ? "" : " (New Discovery!)";
  log(`üß™ FUSION SUCCESS: ${fusionName}${discoveryText}`, 'legendary');
  createConfetti(90);
  
  return { 
    success: true, 
    result: fusionName,
    message: `‚ú® Created ${fusionName}!${discoveryText}` 
  };
}

/* ============================
   EMERGENCY FRIDGE MODE (OFFLINE BONUS)
   ============================ */
function detectOfflineStatus() {
  // Check if user is offline using multiple methods
  const isOffline = !navigator.onLine || 
                   (performance.now() - state.lastOnlineTime > 60000);
  
  if(isOffline && !state.isOfflineMode) {
    // Just went offline - activate Emergency Fridge!
    state.isOfflineMode = true;
    state.offlineStartTime = Date.now();
    
    if(state.settings.emergencyFridgeEnabled) {
      state.emergencyFridge = 3; // Give 3 emergency rolls
      log('üßä EMERGENCY FRIDGE ACTIVATED! You have 3 special offline-only rolls!', 'legendary');
      createConfetti(100);
    }
    
    renderAll();
  } else if(!isOffline && state.isOfflineMode) {
    // Back online
    state.isOfflineMode = false;
    state.lastOnlineTime = Date.now();
    
    // Calculate offline time bonus
    const offlineMinutes = Math.floor((Date.now() - state.offlineStartTime) / 60000);
    if(offlineMinutes > 5) {
      const bonusEnergy = Math.min(50, offlineMinutes * 2);
      state.energy = Math.min(100, state.energy + bonusEnergy);
      log(`üîå Back Online! +${bonusEnergy} energy for ${offlineMinutes} minutes offline`, 'legendary');
    }
    
    renderAll();
  }
}

function rollEmergencyFridge() {
  if(state.emergencyFridge <= 0) {
    setResultText('üßä Emergency Fridge is empty! Go offline to refill.');
    return;
  }
  
  if(!state.isOfflineMode) {
    setResultText('üßä Emergency Fridge only works when offline!');
    return;
  }
  
  // Special Emergency Fridge food pool (cold/frozen themed)
  const emergencyFoods = [
    {name: 'Frozen Pizza Slice', emoji: 'üçï', rarity: 'Uncommon'},
    {name: 'Ice Cream Sandwich', emoji: 'üç¶', rarity: 'Common'},
    {name: 'Frozen Berries', emoji: 'ü´ê', rarity: 'Common'},
    {name: 'Emergency Soup', emoji: 'üç≤', rarity: 'Uncommon'},
    {name: 'Leftover Sushi', emoji: 'üç£', rarity: 'Rare'},
    {name: 'Mystery Frozen Meal', emoji: 'üì¶', rarity: 'Legendary'},
    {name: 'Survival Rations', emoji: 'ü•´', rarity: 'Uncommon'},
    {name: 'Frozen Dumplings', emoji: 'ü•ü', rarity: 'Rare'}
  ];
  
  // Higher chance for better food when offline longer
  const offlineHours = (Date.now() - state.offlineStartTime) / (1000 * 60 * 60);
  const bonusChance = Math.min(0.3, offlineHours * 0.1); // Max 30% bonus
  
  let selectedFood = emergencyFoods[Math.floor(Math.random() * emergencyFoods.length)];
  
  // Bonus rare roll chance
  if(Math.random() < bonusChance) {
    const rareEmergencyFoods = emergencyFoods.filter(f => f.rarity === 'Rare' || f.rarity === 'Legendary');
    selectedFood = rareEmergencyFoods[Math.floor(Math.random() * rareEmergencyFoods.length)] || selectedFood;
  }
  
  // Consume emergency roll
  state.emergencyFridge--;
  state.pulls++;
  
  // Add to inventory and dex
  const finalName = selectedFood.name;
  state.inventory[finalName] = (state.inventory[finalName] || 0) + 1;
  state.foodDex.add(finalName);
  
  // Track in history with special marking
  state.history.unshift({
    ts: new Date().toISOString(),
    name: finalName,
    rarity: selectedFood.rarity,
    display: `üßä ${selectedFood.emoji} ${finalName}`,
    isEmergencyFridge: true
  });
  
  // Result UI
  setResultText(`üßä Emergency Fridge: ${selectedFood.emoji} ${finalName} [${selectedFood.rarity}]`);
  log(`üßä Emergency Fridge gave you: ${selectedFood.emoji} ${finalName}!`, 'legendary');
  
  if(state.emergencyFridge <= 0) {
    log('üì¶ Emergency Fridge is now empty! Go offline again to refill.', 'rare');
  }
  
  // Run achievement checks and save
  runAchievementChecks();
  saveState();
  renderAll();
}

function getEmergencyFridgeStatus() {
  if(!state.settings.emergencyFridgeEnabled) return null;
  
  return {
    available: state.emergencyFridge > 0,
    count: state.emergencyFridge,
    isOffline: state.isOfflineMode,
    canUse: state.isOfflineMode && state.emergencyFridge > 0
  };
}

/* ============================
   LOCAL LEADERBOARDS SYSTEM
   ============================ */
function updateLocalLeaderboard() {
  const currentScore = {
    timestamp: Date.now(),
    pulls: state.pulls,
    foodsCollected: state.foodDex.size,
    achievementsUnlocked: state.achievements.size,
    combosCompleted: state.completedCombos.size,
    shinyFoodsFound: state.shinyFoods.size,
    totalScore: calculateTotalScore()
  };
  
  // Add current session to leaderboard
  state.localLeaderboard.push(currentScore);
  
  // Keep only top 20 scores
  state.localLeaderboard.sort((a, b) => b.totalScore - a.totalScore);
  if(state.localLeaderboard.length > 20) {
    state.localLeaderboard = state.localLeaderboard.slice(0, 20);
  }
  
  saveState();
}

function calculateTotalScore() {
  // Weighted scoring system
  const foodPoints = state.foodDex.size * 10;
  const achievementPoints = state.achievements.size * 50;
  const comboPoints = state.completedCombos.size * 30;
  const shinyPoints = state.shinyFoods.size * 100;
  const efficiencyBonus = Math.floor((state.foodDex.size / Math.max(1, state.pulls)) * 1000);
  
  return foodPoints + achievementPoints + comboPoints + shinyPoints + efficiencyBonus;
}

function getLocalLeaderboard() {
  return state.localLeaderboard.map((entry, index) => ({
    rank: index + 1,
    score: entry.totalScore,
    foods: entry.foodsCollected,
    achievements: entry.achievementsUnlocked,
    combos: entry.combosCompleted,
    shinies: entry.shinyFoodsFound,
    pulls: entry.pulls,
    date: new Date(entry.timestamp).toLocaleDateString(),
    efficiency: Math.round((entry.foodsCollected / Math.max(1, entry.pulls)) * 100)
  }));
}

function displayLocalLeaderboard() {
  const leaderboard = getLocalLeaderboard();
  let html = '<h4>üèÜ Your Personal Leaderboard</h4>';
  
  if(leaderboard.length === 0) {
    html += '<p>Play more to build your personal leaderboard!</p>';
  } else {
    html += '<div style="font-size:12px; margin-bottom:10px;">Top scores from your play sessions:</div>';
    
    leaderboard.slice(0, 10).forEach(entry => {
      const isCurrentBest = entry.rank === 1;
      const bgColor = isCurrentBest ? 'rgba(255,215,0,0.1)' : 'rgba(255,255,255,0.02)';
      const textColor = isCurrentBest ? '#FFD700' : '#ddd';
      
      html += `
        <div style="background:${bgColor}; border-radius:6px; padding:8px; margin:4px 0; color:${textColor};">
          <div style="display:flex; justify-content:space-between; align-items:center;">
            <div><strong>#${entry.rank} - ${entry.score.toLocaleString()} pts</strong></div>
            <div style="font-size:11px;">${entry.date}</div>
          </div>
          <div style="font-size:11px; margin-top:4px;">
            üçú${entry.foods} foods ‚Ä¢ üèÜ${entry.achievements} achievements ‚Ä¢ üß©${entry.combos} combos ‚Ä¢ ‚ú®${entry.shinies} shinies
            <br>üé≤${entry.pulls} pulls ‚Ä¢ üìà${entry.efficiency}% efficiency
          </div>
        </div>
      `;
    });
  }
  
  return html;
}

/* ============================
   REACTION TIME LEADERBOARD
   ============================ */
function updateReactionLeaderboard(reactionTime, reward) {
  const entry = {
    timestamp: Date.now(),
    reactionTime: reactionTime,
    reward: reward
  };
  
  // Add to leaderboard
  state.reactionLeaderboard.push(entry);
  
  // Keep only top 10 scores (fastest times)
  state.reactionLeaderboard.sort((a, b) => a.reactionTime - b.reactionTime);
  if(state.reactionLeaderboard.length > 10) {
    state.reactionLeaderboard = state.reactionLeaderboard.slice(0, 10);
  }
  
  saveState();
  renderReactionLeaderboard();
}

function renderReactionLeaderboard() {
  const leaderboard = state.reactionLeaderboard;
  const container = document.getElementById('reactionLeaderboard');
  
  if(!container) return;
  
  let html = `
    <div class="leaderboard-header">
      <span>Rank</span>
      <span>Time</span>
      <span>Reward</span>
    </div>
  `;
  
  if(leaderboard.length === 0) {
    html += '<div style="text-align:center; padding:20px; color:#888;">No reaction times recorded yet!</div>';
  } else {
    leaderboard.forEach((entry, index) => {
      const rank = index + 1;
      const time = entry.reactionTime.toFixed(0);
      const reward = entry.reward;
      
      html += `
        <div class="leaderboard-entry">
          <div class="leaderboard-rank">#${rank}</div>
          <div class="leaderboard-name">${time}ms</div>
          <div class="leaderboard-score">+${reward} rolls</div>
        </div>
      `;
    });
  }
  
  container.innerHTML = html;
}

/* ============================
   MINI-GAME FOR EXTRA ROLLS
   ============================ */
function showMiniGame() {
  if(!state.settings.miniGamesEnabled) {
    log('üéÆ Mini-games are disabled in settings!', 'rare');
    return;
  }
  
  // Simple reaction time mini-game
  const gameHtml = `
    <div id="miniGameModal" style="position:fixed; inset:0; background:rgba(0,0,0,0.9); display:flex; align-items:center; justify-content:center; z-index:10000;">
      <div style="background:rgba(20,20,20,0.95); padding:30px; border-radius:15px; text-align:center; max-width:400px;">
        <h3 style="color:#FFD700; margin-top:0;">üéÆ Food Reaction Game</h3>
        <div id="miniGameContent">
          <p>Click the button when it turns GREEN!</p>
          <button id="reactionButton" style="width:200px; height:100px; font-size:20px; background:#333; color:#fff; border:none; border-radius:10px; cursor:pointer;">
            üçú WAIT...
          </button>
          <div id="miniGameResult" style="margin-top:15px; min-height:40px;"></div>
        </div>
        <div style="margin-top:20px;">
          <button id="closeMiniGame" style="background:#666; color:#fff; border:none; padding:10px 20px; border-radius:5px; cursor:pointer;">Close</button>
        </div>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', gameHtml);
  
  // Game logic
  let gameActive = false;
  let startTime = 0;
  let timeout = null;
  
  const button = document.getElementById('reactionButton');
  const result = document.getElementById('miniGameResult');
  
  // Start game after random delay
  const startDelay = 1000 + Math.random() * 4000; // 1-5 seconds
  
  timeout = setTimeout(() => {
    if(document.getElementById('reactionButton')) {
      button.style.background = '#4CAF50';
      button.textContent = 'üçú CLICK NOW!';
      gameActive = true;
      startTime = performance.now();
    }
  }, startDelay);
  
  button.addEventListener('click', () => {
    if(!gameActive) {
      if(timeout) clearTimeout(timeout);
      result.innerHTML = '‚è∞ Too early! Wait for green...';
      button.style.background = '#F44336';
      button.textContent = '‚ùå TOO EARLY!';
      setTimeout(() => {
        if(document.getElementById('miniGameModal')) {
          document.getElementById('miniGameModal').remove();
        }
      }, 2000);
      return;
    }
    
    const reactionTime = performance.now() - startTime;
    gameActive = false;
    
    let reward = 0;
    let message = '';
    
    if(reactionTime < 300) {
      reward = 3;
      message = 'üèÜ AMAZING! Lightning fast! +3 rolls';
      createConfetti(120);
    } else if(reactionTime < 500) {
      reward = 2;
      message = '‚≠ê Great reflexes! +2 rolls';
      createConfetti(80);
    } else if(reactionTime < 800) {
      reward = 1;
      message = 'üëç Good job! +1 roll';
      createConfetti(40);
    } else {
      reward = 0;
      message = 'üòÖ A bit slow, but nice try! +0 rolls';
    }
    
    state.extraRolls += reward;
    result.innerHTML = `‚ö° ${reactionTime.toFixed(0)}ms<br>${message}`;
    button.style.background = reward > 0 ? '#4CAF50' : '#FF9800';
    button.textContent = reward > 0 ? 'üéâ SUCCESS!' : 'üòä TRY AGAIN';
    
    // Update reaction leaderboard
    updateReactionLeaderboard(reactionTime, reward);
    
    log(`üéÆ Mini-game completed: ${reactionTime.toFixed(0)}ms - ${reward} bonus rolls!`, 'legendary');
    saveState();
    
    setTimeout(() => {
      if(document.getElementById('miniGameModal')) {
        document.getElementById('miniGameModal').remove();
      }
      renderAll();
    }, 3000);
  });
  
  document.getElementById('closeMiniGame').addEventListener('click', () => {
    if(timeout) clearTimeout(timeout);
    document.getElementById('miniGameModal').remove();
  });
}

/* ============================
   ENERGY/STAMINA SYSTEM
   ============================ */
function updateEnergyFromOfflineTime() {
  const now = Date.now();
  const lastUpdate = state.lastEnergyUpdate || now;
  const timeDiff = now - lastUpdate; // milliseconds
  
  // Regenerate 1 energy per minute (60000 ms), max 100
  const minutesPassed = Math.floor(timeDiff / 60000);
  const energyToAdd = minutesPassed;
  
  if(energyToAdd > 0) {
    const oldEnergy = state.energy;
    state.energy = Math.min(100, state.energy + energyToAdd);
    state.lastEnergyUpdate = now;
    
    if(state.energy > oldEnergy) {
      log(`‚ö° Energy regenerated! +${state.energy - oldEnergy} energy (${minutesPassed} min offline)`);
    }
  }
}

function getEnergyBarHtml() {
  const percentage = (state.energy / 100) * 100;
  const color = percentage > 50 ? '#4CAF50' : percentage > 20 ? '#FF9800' : '#F44336';
  return `
    <div style="background:#333; border-radius:10px; padding:2px; margin:5px 0;">
      <div style="background:${color}; height:20px; width:${percentage}%; border-radius:8px; transition:width 0.3s;"></div>
    </div>
    <div style="text-align:center; margin-top:5px;">‚ö° Energy: ${state.energy}/100 ${state.energy < 10 ? '(Need 10 to roll)' : ''}</div>
  `;
}

/* fallback weighted pick among non-mythic/non-secret using RARITY_BASE */
function weightedFallbackPick(){
  // build pool: Common/Uncommon/Rare/Legendary
  let pool = [];
  ITEMS.forEach(it=>{
    if(it.rarity==='Mythic' || it.rarity==='Secret') return;
    const base = RARITY_BASE[it.rarity] || 0.1;
    // to keep reasonable distribution, push each item proportional times (but avoid huge arrays)
    const weight = Math.max(1, Math.round(base*100));
    pool.push({name:it.name, w: weight});
  });
  // do weighted selection
  const total = pool.reduce((s,p)=>s+p.w,0);
  let r = Math.random()*total;
  for(const p of pool){
    r -= p.w;
    if(r<=0) return p.name;
  }
  return pool[0].name;
}

/* ============================
   pity and pick logic:
   - Secret rarer than Mythic
   - secret pity = 10000; mythic pity = 9000
   - exact absolute odds: check absolute small chance each roll first
   ============================ */
function pickWithPity(){
  // Check secret pity first (highest)
  if(state.pitySecret >= PITY.secret){
    state.pitySecret = 0;
    state.pityMythic = 0;
    // pick a random Secret
    const pool = ITEMS.filter(it=> it.rarity==='Secret').map(i=>i.name);
    return pool[Math.floor(Math.random()*pool.length)] || weightedFallbackPick();
  }
  // Check mythic pity second
  if(state.pityMythic >= PITY.mythic){
    state.pityMythic = 0;
    // pick random Mythic
    const pool = ITEMS.filter(it=> it.rarity==='Mythic').map(i=>i.name);
    return pool[Math.floor(Math.random()*pool.length)] || weightedFallbackPick();
  }

  // Random absolute check: secret first (rarer)
  const r = Math.random();
  if(r < ABS_ODDS.secret){
    // secret found
    return ITEMS.filter(it=> it.rarity==='Secret')[Math.floor(Math.random()*BY_RARITY['Secret'])].name;
  }
  // then mythic
  if(r < ABS_ODDS.mythic + ABS_ODDS.secret){
    return ITEMS.filter(it=> it.rarity==='Mythic')[Math.floor(Math.random()*BY_RARITY['Mythic'])].name;
  }

  // else fallback weighted among common/uncommon/rare/legendary
  return weightedFallbackPick();
}

/* ============================
   roll logic
   ============================ */
function rollOnce(){
  // ‚ö° ENERGY SYSTEM CHECK - Each roll costs 10 energy (BYPASS IN DEV MODE)
  updateEnergyFromOfflineTime(); // check for offline regeneration
  if(state.energy < 10 && !state.devEnabled) {
    setResultText("‚ö° Not enough energy! Wait for energy to regenerate.");
    log("‚ö° Energy too low! Each roll costs 10 energy.", 'rare');
    renderAll();
    return;
  }
  
  // Consume energy for this roll (unless in dev mode)
  if(!state.devEnabled) {
    state.energy -= 10;
  } else {
    log("üõ†Ô∏è Dev Mode: Energy bypass enabled!", 'rare');
  }
  
  state.pulls++;
  // increment pity counters (until we hit)
  state.pityMythic++;
  state.pitySecret++;

  const pickedName = pickWithPity();
  const item = findItem(pickedName) || {name:pickedName, emoji:'üß©', rarity:'Combo'}; // combo results or bakery
  
  // üåü SHINY VARIANT SYSTEM - 5% chance for any food to be shiny!
  const isShiny = Math.random() < 0.05;
  const finalName = isShiny ? `‚ú® ${pickedName}` : pickedName;
  
  if(isShiny) {
    state.shinyFoods.add(pickedName); // track base food as shiny
    log(`‚ú® SHINY VARIANT! You found a sparkling ${pickedName}!`, 'secret');
    createConfetti(80); // celebration animation
  }
  
  // reset counters depending on rarity
  if(item.rarity === 'Secret'){
    state.pitySecret = 0;
    state.pityMythic = Math.max(0, state.pityMythic - 50); // slight mitigation but not required
  } else if(item.rarity === 'Mythic'){
    state.pityMythic = 0;
    // secret not reset
  } else {
    // none reset
  }

  // add to inventory (use shiny name if applicable)
  state.inventory[finalName] = (state.inventory[finalName]||0)+1;
  // record first obtain time if new
  if(!state.firstObtainedAt[finalName]) state.firstObtainedAt[finalName] = nowISO();
  // add to dex (both base and shiny names)
  state.foodDex.add(finalName);
  if(isShiny) state.foodDex.add(item.name); // also add base food
  // history
  const shinyEmoji = isShiny ? '‚ú®' + item.emoji : item.emoji;
  state.history.unshift({ts: new Date().toISOString(), name:finalName, rarity:item.rarity, display:`${shinyEmoji} ${finalName}`, isShiny: isShiny});
  if(state.history.length>2000) state.history.pop();

  // result UI
  const rarityText = isShiny ? `${item.rarity} ‚ú®SHINY` : item.rarity;
  setResultText(`You Got: ${shinyEmoji} ${finalName} [${rarityText}]`);
  playRarityPop(item.rarity);

  // special unlocks
  if(item.name.includes("GOLDEN Nugget") && !state.goldenUnlocked){
    state.goldenUnlocked = true;
    log("üëë GOLDEN Nugget obtained ‚Äî golden background unlocked!");
    triggerGoldenBackground();
  }
  if(item.rarity==='Secret'){ log(`‚ú® SECRET FIND: ${item.emoji} ${item.name} [${item.rarity}]`,'secret'); triggerSecretBackground(); createConfetti(160); }
  else if(item.rarity==='Mythic'){ log(`üåü MYTHIC: ${item.emoji} ${item.name} [${item.rarity}]`,'legendary'); createConfetti(200); }
  else if(item.rarity==='Legendary'){ log(`üåü LEGENDARY: ${item.emoji} ${item.name} [${item.rarity}]`,'legendary'); createConfetti(110); }
  else log(`You got: ${item.emoji} ${item.name} [${item.rarity}]`);

  // combos/achievements
  processCombos();
  runAchievementChecks();
  
  // üèÜ Update leaderboard on major milestones
  if(state.pulls % 25 === 0 && state.pulls > 0) {
    updateLocalLeaderboard();
  }

  // extra rolls from quests
  if(state.extraRolls>0){
    state.extraRolls--; log("üéÅ Quest reward: bonus roll!");
    saveState();
    setTimeout(()=>{ rollOnce(); saveState(); renderAll(); }, 160);
    return;
  }

  saveState();
  renderAll();
}

/* multi N, used by dev only */
function rollMultiN(n){
  if(!Number.isFinite(n) || n<=0) return;
  // run N sequentially but don't block UI
  (async ()=>{
    for(let i=0;i<n;i++){
      rollOnce();
      await new Promise(r=>setTimeout(r, 90));
    }
  })();
}

/* ============================
   combos: consume ingredients & create result
   ============================ */
function processCombos(){
  let made = false;
  do{
    made=false;
    for(const combo of COMBOS){
      const ok = combo.req.every(r => (state.inventory[r]||0) >= 1);
      if(ok){
        // consume
        combo.req.forEach(r => { state.inventory[r] -= 1; if(state.inventory[r] <= 0) delete state.inventory[r]; });
        // add result
        state.inventory[combo.result] = (state.inventory[combo.result]||0)+1;
        state.foodDex.add(combo.result);
        state.completedCombos.add(combo.result);
        log(`üß© Combo: ${combo.result} (from ${combo.req.join(' + ')})`);
        createConfetti(90);
        saveState();
        made=true; break;
      }
    }
  }while(made);
}

/* ============================
   achievements
   ============================ */
function runAchievementChecks(){
  ACHIEVEMENTS.forEach(a=>{
    if(a.check && a.check(state) && !state.achievements.has(a.title)){
      state.achievements.add(a.title);
      log(`üèÜ Achievement Unlocked: ${a.title} ‚Äî ${a.desc}`);
      createConfetti(120);
      if(a.reward && a.reward.extraRolls) state.extraRolls += a.reward.extraRolls;
    }
  });
  // combos achievements
  COMBOS.forEach(c=>{
    if(state.completedCombos.has(c.result) && c.achievement && !state.achievements.has(c.achievement)){
      state.achievements.add(c.achievement);
      log(`üèÜ Achievement Unlocked: ${c.achievement} ‚Äî (from combo ${c.result})`);
      createConfetti(100);
    }
  });
  // dynamic: unlock dev friend if dev toggled
  if(state.devEnabled && !state.achievements.has("üõ†Ô∏è Dev Friend")){
    state.achievements.add("üõ†Ô∏è Dev Friend");
    log("üèÜ Achievement Unlocked: üõ†Ô∏è Dev Friend ‚Äî Enabled Dev Mode");
  }
  // golden background achievement
  if(state.goldenUnlocked && !state.achievements.has("üëë Golden Unlock")){
    state.achievements.add("üëë Golden Unlock");
    log("üèÜ Achievement Unlocked: üëë Golden Unlock");
  }
}

/* ============================
   UI: rendering functions
   ============================ */
const logEl = document.getElementById('log');
function log(msg,type){
  const row=document.createElement('div'); row.className='log-row';
  const dot=document.createElement('div'); dot.className='log-dot';
  dot.style.background = type==='secret'?'#ff77ff':(type==='legendary'?'gold':'#fff');
  const txt=document.createElement('div'); txt.innerText = `${formatTime(clock24)} ‚Äî ${msg}`;
  if(type==='secret') txt.classList.add('secret');
  if(type==='legendary') txt.classList.add('legendary');
  row.appendChild(dot); row.appendChild(txt);
  logEl.prepend(row);
  while(logEl.children.length > 400) logEl.removeChild(logEl.lastChild);
}

/* result text */
function setResultText(t){
  const el = document.getElementById('result');
  el.classList.remove('pop');
  void el.offsetWidth; // reflow to restart
  el.innerText = t;
  el.classList.add('pop');
}

/* render foods grid - FIXED SORTING */
function renderFoods(){
  const grid = document.getElementById('foodsGrid');
  grid.innerHTML = '';
  const comboResults = COMBOS.map(c=>c.result);
  const allNames = [...new Set([...ITEM_NAMES, ...comboResults])];
  const sort = document.getElementById('dexSort').value;
  
  if(sort==='alpha') {
    allNames.sort((a,b)=>a.localeCompare(b));
  } else {
    // Rarity sorting - rarest to most common
    const rarityOrder = { 
      'Mythic': 0, 'Secret': 1, 'Legendary': 2, 'Rare': 3, 'Uncommon': 4, 'Common': 5, 'Combo': 6, 'undefined': 7 
    };
    
    allNames.sort((a,b)=>{
      const ai = findItem(a); 
      const bi = findItem(b);
      const ar = ai? ai.rarity : (comboResults.includes(a)? 'Combo' : '');
      const br = bi? bi.rarity : (comboResults.includes(b)? 'Combo' : '');
      
      // Sort by rarity first (rarest to most common)
      if(rarityOrder[ar] !== rarityOrder[br]) {
        return rarityOrder[ar] - rarityOrder[br];
      }
      
      // Then by obtained status (obtained first)
      const oa = state.foodDex.has(a)?0:1;
      const ob = state.foodDex.has(b)?0:1;
      if(oa !== ob) return oa - ob;
      
      // Finally by name
      return a.localeCompare(b);
    });
  }

  allNames.forEach(name=>{
    const item = findItem(name);
    const el = document.createElement('div'); el.className='dex-item' + (state.foodDex.has(name)? '' : ' locked');
    const emojiDiv = document.createElement('div'); emojiDiv.className='dex-emoji'; emojiDiv.innerText = item? item.emoji : 'üß©';
    const nameDiv = document.createElement('div'); nameDiv.className='dex-name';
    nameDiv.innerText = (state.foodDex.has(name)? '‚úÖ ':'') + name;
    el.appendChild(emojiDiv); el.appendChild(nameDiv);
    if(item){
      const sub = document.createElement('div'); sub.className='small-muted'; sub.style.fontSize='11px'; sub.innerText = item.rarity;
      el.appendChild(sub);
      // first obtainment timestamp small
      if(state.firstObtainedAt[item.name]){
        const ts = document.createElement('div'); ts.className='small-muted'; ts.style.fontSize='11px'; ts.style.marginTop='6px';
        ts.innerText = `First: ${new Date(state.firstObtainedAt[item.name]).toLocaleString()}`;
        el.appendChild(ts);
      }
    } else {
      // combos show description in title?
    }
    grid.appendChild(el);
  });

  const discovered = state.foodDex.size;
  const total = allNames.length;
  document.getElementById('dexProgress').innerText = `${discovered}/${total}`;
}

/* render achievements */
function renderAchs(){
  const grid = document.getElementById('achGrid');
  grid.innerHTML = '';
  const comboAchs = COMBOS.map(c=>c.achievement).filter(Boolean);
  const core = ACHIEVEMENTS.map(a=>a.title).concat(comboAchs);
  const all = [...new Set(core)];
  const filter = document.getElementById('achFilter').value;
  all.forEach(a=>{
    const unlocked = state.achievements.has(a);
    if(filter==='unlocked' && !unlocked) return;
    if(filter==='locked' && unlocked) return;
    const card = document.createElement('div'); card.className='ach-card' + (unlocked? ' unlocked' : '');
    const ico = document.createElement('div'); ico.style.fontSize='20px'; ico.innerText = unlocked? 'üèÜ':'üîí';
    const t = document.createElement('div'); t.className='ach-title'; t.innerText = a;
    const sub = document.createElement('div'); sub.className='small-muted'; 
    if(unlocked) {
      sub.innerText = 'Unlocked';
    } else {
      const achData = ACHIEVEMENTS.find(x=>x.title===a);
      if(achData && achData.tip) {
        sub.innerText = `üí° ${achData.tip}`;
      } else {
        sub.innerText = achData?.desc || 'Locked';
      }
    }
    card.appendChild(ico); card.appendChild(t); card.appendChild(sub);
    grid.appendChild(card);
  });
  const unlocked = all.filter(a=> state.achievements.has(a)).length;
  document.getElementById('achProgress').innerText = `${unlocked}/${all.length}`;
}

/* render combos */
function renderCombos(){
  const list = document.getElementById('combosList'); list.innerHTML='';
  COMBOS.forEach(c=>{
    const card = document.createElement('div'); card.className='combo-card';
    const title = document.createElement('div'); title.className='combo-result'; title.innerText = `${c.result} ${c.achievement? ' ‚Äî ' + c.achievement : ''}`;
    const desc = document.createElement('div'); desc.className='small-muted'; desc.style.marginBottom='6px'; desc.innerText = c.desc || '';
    const reqs = document.createElement('div'); reqs.className='combo-req';
    c.req.forEach(r=> {
      const it = findItem(r);
      const el = document.createElement('div'); el.style.padding='6px'; el.style.borderRadius='6px'; el.style.background='rgba(255,255,255,0.02)';
      el.innerText = (it? it.emoji + ' ' : '') + r + (state.inventory[r]? ` √ó${state.inventory[r]}` : '');
      reqs.appendChild(el);
    });
    const makeBtn = document.createElement('button'); makeBtn.className='btn'; makeBtn.style.marginTop='8px'; makeBtn.innerText = 'Make Combo (consume)';
    makeBtn.addEventListener('click', ()=>{
      const ok = c.req.every(r => (state.inventory[r]||0) >= 1);
      if(!ok){ alert('Missing ingredients'); return; }
      c.req.forEach(r=> { state.inventory[r] -= 1; if(state.inventory[r]<=0) delete state.inventory[r]; });
      state.inventory[c.result] = (state.inventory[c.result]||0)+1;
      state.foodDex.add(c.result); state.completedCombos.add(c.result); log(`üß© Made ${c.result} (combo)`); saveState(); renderAll();
    });
    card.appendChild(title); card.appendChild(desc); card.appendChild(reqs); card.appendChild(makeBtn);
    list.appendChild(card);
  });
}

/* render dev/stats */
function renderQuick(){
  // ‚ö° Update energy from offline time before rendering
  updateEnergyFromOfflineTime();
  
  // üéÅ Check for daily reward automatically 
  const rewardStatus = getDailyRewardStatus();
  if(rewardStatus.canClaim) {
    // Auto-claim daily rewards when opening stats
    checkDailyReward();
    saveState();
  }
  
  document.getElementById('stats').innerText = `Pulls: ${state.pulls} ¬∑ Pity(M): ${state.pityMythic} ¬∑ Pity(S): ${state.pitySecret} ¬∑ Extra Rolls: ${state.extraRolls}`;
  
  // ‚ö° ENERGY BAR DISPLAY - Add energy bar to the stats area
  const energyDiv = document.getElementById('energyBar');
  if(energyDiv) {
    energyDiv.innerHTML = getEnergyBarHtml();
  }
  
  // üéÅ DAILY REWARD STATUS
  const dailyDiv = document.getElementById('dailyReward');
  if(dailyDiv) {
    const status = getDailyRewardStatus();
    dailyDiv.innerHTML = status.claimed 
      ? `üéÅ Daily Reward: Claimed! Next in ${status.hoursUntilReset}h`
      : `üéÅ Daily Reward: Ready to claim!`;
  }
  
  // üßä EMERGENCY FRIDGE STATUS & BUTTON VISIBILITY
  const fridgeBtn = document.getElementById('rollEmergencyFridge');
  if(fridgeBtn) {
    const fridgeStatus = getEmergencyFridgeStatus();
    if(fridgeStatus && fridgeStatus.canUse) {
      fridgeBtn.style.display = 'inline-block';
      fridgeBtn.textContent = `üßä Emergency Fridge (${fridgeStatus.count})`;
    } else {
      fridgeBtn.style.display = 'none';
    }
  }
  
  // üèÜ LOCAL LEADERBOARD DISPLAY
  const leaderboardDiv = document.getElementById('localLeaderboard');
  if(leaderboardDiv) {
    leaderboardDiv.innerHTML = displayLocalLeaderboard();
  }
  
  // üèÜ REACTION LEADERBOARD DISPLAY
  renderReactionLeaderboard();
  
  const inv = Object.entries(state.inventory).sort((a,b)=>b[1]-a[1]).slice(0,12);
  document.getElementById('quickInv').innerHTML = inv.length? inv.map(x=>`${x[1]}√ó ${x[0]}`).join('<br>') : '(empty)';
  document.getElementById('mythicPityLabel').innerText = `pity ${state.pityMythic}/${PITY.mythic}`;
  document.getElementById('secretPityLabel').innerText = `pity ${state.pitySecret}/${PITY.secret}`;
}

/* render drop rates visual fills (approx animation) */
function renderDropRates(){
  // approximate proportions (for visual only): Common & Uncommon dominate
  // We'll set values visually: Common 70%, Uncommon 20%, Rare 7.9%, Legendary 1%, Mythic 0.011%, Secret 0.01%
  const values = {
    common:70, uncommon:20, rare:7.9, legendary:1, mythic:0.011, secret:0.01
  };
  document.getElementById('fill-common').style.width = values.common + '%';
  document.getElementById('fill-uncommon').style.width = values.uncommon + '%';
  document.getElementById('fill-rare').style.width = values.rare + '%';
  document.getElementById('fill-legendary').style.width = values.legendary + '%';
  // mythic and secret tiny fills; animate to small fixed pixels
  document.getElementById('fill-mythic').style.width = (values.mythic*100) + '%';
  document.getElementById('fill-secret').style.width = (values.secret*100) + '%';
  document.getElementById('dropRatesText').innerText = `Absolute odds (approx): Mythic ‚âà 1/${Math.round(1/ABS_ODDS.mythic)}, Secret ‚âà 1/${Math.round(1/ABS_ODDS.secret)}. Pity: Mythic ${PITY.mythic} pulls, Secret ${PITY.secret} pulls.`;
}

/* render everything */
function renderAll(){
  renderFoods(); renderAchs(); renderCombos(); renderQuick(); renderDropRates();
}

/* ============================
   confetti canvas
   ============================ */
const confCanvas = document.getElementById('confetti');
const confCtx = confCanvas.getContext && confCanvas.getContext('2d');
function resizeCanvas(){ if(confCanvas){ confCanvas.width = window.innerWidth; confCanvas.height = window.innerHeight; } }
window.addEventListener('resize', resizeCanvas); resizeCanvas();
function createConfetti(count=80){
  if(!confCtx) return;
  const pieces = [];
  for(let i=0;i<count;i++){
    pieces.push({
      x: Math.random()*confCanvas.width,
      y: Math.random()*-confCanvas.height,
      r: Math.random()*6+3,
      d: Math.random()*100,
      tilt: Math.random()*10-10,
      color: `hsl(${Math.random()*360} 80% 60%)`,
      tiltInc: Math.random()*0.06+0.03
    });
  }
  let t0 = null;
  const run = (t)=>{
    if(!t0) t0 = t;
    const dt = t - t0;
    confCtx.clearRect(0,0,confCanvas.width, confCanvas.height);
    pieces.forEach(p=>{
      confCtx.beginPath();
      confCtx.lineWidth = p.r/2;
      confCtx.strokeStyle = p.color;
      confCtx.moveTo(p.x+p.tilt, p.y);
      confCtx.lineTo(p.x+p.tilt+p.r/2, p.y+p.tilt+p.r/2);
      confCtx.stroke();
      p.tilt += p.tiltInc;
      p.y += (Math.cos(p.d)+3+p.r/2)/2;
      p.x += Math.sin(p.d);
      if(p.y > confCanvas.height) p.y = -10;
    });
    if(dt < 3500) requestAnimationFrame(run);
    else confCtx.clearRect(0,0,confCanvas.width, confCanvas.height);
  };
  requestAnimationFrame(run);
}

/* ============================
   background themes & floating/bubbles
   ============================ */
let bgMode = 'floating';
let floatTimer, bubbleTimer;

function clearFloatArea(){
  document.getElementById('floatArea').innerHTML = '';
  clearInterval(floatTimer); clearInterval(bubbleTimer);
  document.body.classList.remove('gold-bg');
  const goldEl = document.querySelector('.gold-glitter');
  if(goldEl) goldEl.remove();
  // remove special secret background class if present
  document.body.classList.remove('secret-bg');
}

function setBackgroundMode(mode){
  clearFloatArea();
  bgMode = mode;
  document.documentElement.style.setProperty('--bg-overlay', document.getElementById('bgOpacity').value || 0.10);
  if(mode === 'floating'){
    startFloatingFoods();
  } else if(mode === 'aeroBlue'){
    startAeroBlue();
  } else if(mode === 'aeroGreen'){
    startAeroGreen();
  } else if(mode === 'purpleAero'){
    startPurpleAero();
  }
}

function startFloatingFoods(){
  const area = document.getElementById('floatArea');
  const emojis = ITEMS.map(i=>i.emoji).filter(Boolean);
  const spawn = ()=>{
    const el = document.createElement('div');
    el.className='float-emoji';
    el.innerText = emojis[Math.floor(Math.random()*emojis.length)];
    const left = Math.random()*100;
    const top = (Math.random()*60 - 10);
    el.style.left = left + '%';
    el.style.top = top + '%';
    el.style.fontSize = (12 + Math.random()*34) + 'px';
    el.style.opacity = (0.5 + Math.random()*0.5);
    area.appendChild(el);
    // animate down and rotate
    setTimeout(()=> {
      const dx = (Math.random()*200 - 100);
      el.style.transform = `translate(${dx}px, ${window.innerHeight + 200}px) rotate(${Math.random()*360}deg)`;
      el.style.opacity = 0.9;
    }, 80 + Math.random()*600);
    setTimeout(()=> el.remove(), 10000 + Math.random()*10000);
  };
  // initial burst
  for(let i=0;i<20;i++) spawn();
  floatTimer = setInterval(spawn, 900);
}

function startAeroBlue(){
  const area = document.getElementById('floatArea');
  // blue gradient background overlay effect
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#021024,#00142a)');
  // bubbles
  const spawnBubble = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 10 + Math.random()*90;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(255,255,255,0.12), rgba(255,255,255,0.03))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnBubble();
  bubbleTimer = setInterval(spawnBubble, 1200);
}

function startAeroGreen(){
  const area = document.getElementById('floatArea');
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#05200a,#021006)');
  // leaves-like bubbles
  const spawnLeaf = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 8 + Math.random()*60;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(150,255,200,0.12), rgba(255,255,255,0.02))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnLeaf();
  bubbleTimer = setInterval(spawnLeaf, 1000);
}

function startPurpleAero(){
  const area = document.getElementById('floatArea');
  document.documentElement.style.setProperty('--bg','linear-gradient(180deg,#20012b,#100016)');
  const spawnPurple = ()=>{
    const b = document.createElement('div'); b.className='bubble';
    const size = 12 + Math.random()*80;
    b.style.width = b.style.height = size + 'px';
    b.style.left = Math.random()*100 + 'vw';
    b.style.background = 'radial-gradient(circle at 30% 30%, rgba(200,140,255,0.14), rgba(255,255,255,0.02))';
    b.style.animationDuration = (10 + Math.random()*20) + 's';
    area.appendChild(b);
    setTimeout(()=> b.remove(), 22000);
  };
  for(let i=0;i<12;i++) spawnPurple();
  bubbleTimer = setInterval(spawnPurple, 900);
}

/* golden background trigger */
function triggerGoldenBackground(){
  document.body.classList.add('gold-bg');
  // add glitter layer
  const g = document.createElement('div'); g.className='gold-glitter';
  g.innerHTML = `<svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
    <defs><linearGradient id="g" x1="0" x2="1"><stop offset="0" stop-color="#ffd27f"/><stop offset="1" stop-color="#ffefc0"/></linearGradient></defs>
    <rect x="0" y="0" width="100" height="100" fill="url(#g)" opacity="0.06"></rect>
  </svg>`;
  document.body.appendChild(g);
  // golden falling small circles
  const area = document.getElementById('floatArea');
  for(let i=0;i<60;i++){
    const p = document.createElement('div'); p.style.position='absolute'; p.style.left = Math.random()*100 + 'vw'; p.style.top = (-20 - Math.random()*60) + 'vh';
    p.style.width = p.style.height = (4 + Math.random()*8) + 'px'; p.style.borderRadius='50%'; p.style.background = 'linear-gradient(180deg,#ffd27f,#ffefc0)'; p.style.opacity = 0.9; p.style.transform = `translateY(0)`;
    area.appendChild(p);
    const dur = 4000 + Math.random()*6000;
    p.animate([{transform:'translateY(0)', opacity:1},{transform:`translateY(${window.innerHeight + 200}px)`, opacity:0}],{duration:dur, easing:'linear'});
    setTimeout(()=> p.remove(), 8000 + Math.random()*8000);
  }
}

/* secret background trigger */
function triggerSecretBackground(){
  // subtle purple-pink aurora, plus confetti
  document.body.style.background = 'linear-gradient(180deg,#0b0010,#140018)';
  setTimeout(()=> {
    document.body.style.background = 'var(--bg)';
  }, 9000);
}

/* ============================
   sound/visual pop (we'll avoid music)
   ============================ */
function playRarityPop(rarity){
  const el = document.getElementById('result');
  el.classList.add('pop');
  setTimeout(()=> el.classList.remove('pop'), 600);
}

/* ============================
   event wiring & dev
   ============================ */
document.getElementById('roll1').addEventListener('click', ()=> { rollOnce(); saveState(); renderAll(); spawnShootingStarIf(); });
document.getElementById('multiRun').addEventListener('click', ()=> {
  if(!state.devEnabled){ alert('Dev mode required for multi N'); return; }
  const n = parseInt(document.getElementById('multiN').value||0,10);
  if(!n || n<=0) return alert('Enter a positive N');
  rollMultiN(n);
});

document.querySelectorAll('.tab').forEach(t=>{
  t.addEventListener('click', (e)=>{
    document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));
    t.classList.add('active');
    const target = t.dataset.tab;
    document.querySelectorAll('.tab-pane').forEach(p=> p.style.display='none');
    document.getElementById(target).style.display='block';
  });
});

/* quick open */
document.getElementById('openDex').addEventListener('click', ()=> { document.querySelector('[data-tab="foodsTab"]').click(); });
document.getElementById('openAch').addEventListener('click', ()=> { document.querySelector('[data-tab="achsTab"]').click(); });
document.getElementById('openCombos').addEventListener('click', ()=> { document.querySelector('[data-tab="combosTab"]').click(); });

/* settings */
document.getElementById('settingsBtn').addEventListener('click', ()=> { document.getElementById('settingsDrawer').style.display='block'; });
document.getElementById('closeSettings').addEventListener('click', ()=> { document.getElementById('settingsDrawer').style.display='none'; });

document.querySelectorAll('input[name="bgMode"]').forEach(r=> r.addEventListener('change', (e)=>{
  setBackgroundMode(e.target.value);
}));

/* bg opacity */
document.getElementById('bgOpacity').addEventListener('input', (e)=>{
  const v = parseFloat(e.target.value);
  document.documentElement.style.setProperty('--bg-overlay', v);
  document.getElementById('bgOverlay').style.background = `rgba(0,0,0,${v})`;
});

/* clock format */
document.querySelectorAll('input[name="clockFmt"]').forEach(r=> r.addEventListener('change', (e)=> {
  clock24 = e.target.value==='24';
  localStorage.setItem('clock_format_24_final', clock24? '1':'0');
}));

/* export/import */
document.getElementById('exportSave').addEventListener('click', ()=>{
  const data = localStorage.getItem(STORAGE_KEY);
  if(!data){ alert('No save data to export'); return; }
  const blob = new Blob([data], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href = url; a.download = 'ultimate_food_save.json'; a.click(); URL.revokeObjectURL(url);
});
document.getElementById('importSave').addEventListener('click', ()=> {
  const inp = document.createElement('input'); inp.type='file'; inp.accept='application/json'; inp.onchange = (ev)=>{
    const f = ev.target.files[0]; if(!f) return;
    const reader = new FileReader(); reader.onload = ()=> {
      try{
        const parsed = JSON.parse(reader.result);
        localStorage.setItem(STORAGE_KEY, JSON.stringify(parsed)); loadState(); saveState(); renderAll(); alert('Save imported.');
      }catch(err){ alert('Invalid file'); }
    }; reader.readAsText(f);
  }; inp.click();
});

/* reset/wipe */
document.getElementById('resetAll').addEventListener('click', ()=> clearAllData());
document.getElementById('wipeData').addEventListener('click', ()=> clearAllData());
document.getElementById('wipeDataSmall').addEventListener('click', ()=> clearAllData());
function clearAllData(){
  if(!confirm('Reset ALL saved data? This will wipe Dex, inventory, achievements and history.')) return;
  state = {
    inventory:{}, foodDex:new Set(), achievements:new Set(), completedCombos:new Set(),
    pulls:0, pityMythic:0, pitySecret:0, extraRolls:0, history:[], firstObtainedAt:{}, devEnabled:false, goldenUnlocked:false
  };
  saveState(); renderAll(); createConfetti(160);
}

/* dev mode toggle & populate */
function toggleDevUI(on){
  state.devEnabled = !!on;
  document.getElementById('devEnableCheckbox').checked = state.devEnabled;
  document.getElementById('devControls').style.display = state.devEnabled ? 'block':'none';
  saveState();
  if(state.devEnabled) populateDevSelects();
}
document.getElementById('devEnableCheckbox').addEventListener('change', (e)=> toggleDevUI(e.target.checked));

function populateDevSelects(){
  const giveFoodSelect = document.getElementById('giveFoodSelect');
  giveFoodSelect.innerHTML = ITEMS.map(it=>`<option value="${it.name}">${it.emoji} ${it.name} (${it.rarity})</option>`).join('');
  const comboSelect = document.getElementById('giveComboSelect');
  comboSelect.innerHTML = COMBOS.map(c=>`<option value="${c.result}">üß© ${c.result}</option>`).join('');
}


/* dev actions */
document.getElementById('giveFoodBtn').addEventListener('click', ()=>{
  const name = document.getElementById('giveFoodSelect').value;
  state.inventory[name] = (state.inventory[name]||0)+1; state.foodDex.add(name); if(!state.firstObtainedAt[name]) state.firstObtainedAt[name] = nowISO();
  log(`[DEV] Gave food: ${name}`); saveState(); renderAll();
});
document.getElementById('giveComboBtn').addEventListener('click', ()=>{
  const name = document.getElementById('giveComboSelect').value;
  state.inventory[name] = (state.inventory[name]||0)+1; state.foodDex.add(name); state.completedCombos.add(name); if(!state.firstObtainedAt[name]) state.firstObtainedAt[name] = nowISO();
  log(`[DEV] Gave combo result: ${name}`); saveState(); renderAll();
});
document.getElementById('forceCommon').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Common');
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Common: ${pick.name}`); saveState(); renderAll();
});
document.getElementById('forceLegendary').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Legendary');
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Legendary: ${pick.name}`,'legendary'); saveState(); renderAll();
});
document.getElementById('forceMythic').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Mythic'); if(pool.length===0){ alert('No Mythic items.'); return; }
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Mythic: ${pick.name}`,'legendary'); createConfetti(200); saveState(); renderAll();
});
document.getElementById('forceSecret').addEventListener('click', ()=>{
  const pool = ITEMS.filter(i=>i.rarity==='Secret'); if(pool.length===0){ alert('No Secret items.'); return; }
  const pick = pool[Math.floor(Math.random()*pool.length)];
  state.inventory[pick.name] = (state.inventory[pick.name]||0)+1; state.foodDex.add(pick.name); state.history.unshift({ts:new Date().toISOString(), name:pick.name, rarity:pick.rarity, display:`${pick.emoji} ${pick.name}`});
  log(`[DEV] Forced Secret: ${pick.name}`,'secret'); createConfetti(200); saveState(); renderAll();
});
document.getElementById('revealRecipes').addEventListener('click', ()=>{
  COMBOS.forEach(c=> { state.foodDex.add(c.result); state.completedCombos.add(c.result); if(!state.firstObtainedAt[c.result]) state.firstObtainedAt[c.result] = nowISO(); });
  log('[DEV] Revealed all recipes'); saveState(); renderAll();
});
document.getElementById('devReset').addEventListener('click', ()=>{
  if(!confirm('Reset save (dev)?')) return;
  state = { inventory:{}, foodDex:new Set(), achievements:new Set(), completedCombos:new Set(), pulls:0, pityMythic:0, pitySecret:0, extraRolls:0, history:[], firstObtainedAt:{}, devEnabled:false, goldenUnlocked:false };
  saveState(); renderAll(); log('[DEV] Reset performed');
});

/* ============================
   shooting star helper
   ============================ */
function spawnShootingStarIf(){
  if(Math.random()<0.36){
    const el = document.createElement('div');
    el.style.position='fixed'; el.style.width='3px'; el.style.height='120px'; el.style.background='linear-gradient(90deg,rgba(255,255,255,1),transparent)'; el.style.zIndex=0; el.style.pointerEvents='none';
    const top = 10 + Math.random()*window.innerHeight*0.45;
    el.style.top = top + 'px';
    el.style.left = (window.innerWidth + 50) + 'px';
    el.style.transform = `rotate(${(20+Math.random()*40)*-1}deg)`;
    document.body.appendChild(el);
    const dur = 800 + Math.random()*1600;
    el.animate([{transform:el.style.transform, opacity:1},{transform:`translate(-${window.innerWidth + 500}px, ${window.innerHeight}px) ${el.style.transform}`, opacity:0}],{duration:dur, easing:'linear'});
    setTimeout(()=> el.remove(), dur+80);
  }
}

/* ============================
   live clock
   ============================ */
const clockEl = document.getElementById('liveClock');
function tickClock(){ clockEl.innerText = formatTime(clock24); }
setInterval(tickClock, 1000);
tickClock();

/* ============================
   INIT
   ============================ */
window.addEventListener('load', ()=>{
  loadState();

  // apply bg overlay from CSS var
  const rawOverlay = getComputedStyle(document.documentElement).getPropertyValue('--bg-overlay') || 0.10;
  document.getElementById('bgOpacity').value = parseFloat(rawOverlay);
  document.getElementById('bgOverlay').style.background = `rgba(0,0,0,${parseFloat(rawOverlay)})`;

  // dev UI if saved
  if(state.devEnabled) { document.getElementById('devEnableCheckbox').checked = true; toggleDevUI(true); }

  // default background mode: floating
  document.querySelectorAll('input[name="bgMode"]').forEach(r=> { if(r.value==='floating') r.checked=true; });
  setBackgroundMode('floating');

  // populate selects
  populateDevSelects();

  // render UI
  renderAll();
  log('Welcome ‚Äî floating foods default. Open Settings (bottom-left) to change visuals.');
  // occasional small stars
  setInterval(()=> { if(Math.random()<0.38) spawnShootingStarIf(); }, 4800);
});

/* expose debug */
window._state = ()=> state;
window._forceAdd = (n)=>{ state.inventory[n]=(state.inventory[n]||0)+1; state.foodDex.add(n); if(!state.firstObtainedAt[n]) state.firstObtainedAt[n]=nowISO(); log('[DEV] forced '+n); saveState(); renderAll(); }

/* ============================
   THUNDER REWARD SYSTEM
   ============================ */
// Helper function to generate random emojis
const emojis = ['‚ö°', 'üå©Ô∏è', 'üå™Ô∏è', 'üî•', 'üåà', '‚òÅÔ∏è'];

// Function to trigger the thunder reward system
function triggerThunderReward() {
  document.body.classList.add('thunder-bg');
  
  // Create thunder aura
  const thunderAura = document.createElement('div');
  thunderAura.classList.add('thunder-aura');
  document.body.appendChild(thunderAura);

  // Create random flashing thunder effect
  const thunderFlash = document.createElement('div');
  thunderFlash.classList.add('thunder-flash');
  document.body.appendChild(thunderFlash);

  setTimeout(() => {
    thunderFlash.classList.add('active');
    setTimeout(() => {
      thunderFlash.classList.remove('active');
    }, 150);
  }, 1000);

  // Create random emoji clouds
  for (let i = 0; i < 5; i++) {
    const cloud = document.createElement('div');
    cloud.classList.add('thunder-cloud-emoji');
    cloud.textContent = emojis[Math.floor(Math.random() * emojis.length)];
    cloud.style.left = `${Math.random() * 100}vw`;
    cloud.style.top = `${Math.random() * 100}vh`;
    document.body.appendChild(cloud);

    // Animate the cloud
    cloud.style.animationDuration = `${Math.random() * 5 + 10}s`; // Random duration for the rise
  }

  // Remove elements after the storm effect is complete
  setTimeout(() => {
    thunderAura.remove();
    document.querySelectorAll('.thunder-cloud-emoji').forEach(cloud => cloud.remove());
  }, 8000); // Remove everything after 8 seconds
}

// Random trigger with 0.1% chance every 3 seconds
setInterval(() => {
  if (Math.random() < 0.001) { // 0.1% chance
    triggerThunderReward();
  }
}, 3000); // Check every 3 seconds

// Quick access button to manually trigger thunder reward
document.getElementById('thunderRewardBtn') && document.getElementById('thunderRewardBtn').addEventListener('click', triggerThunderReward);

/* ============================
   ULTIMATE SETTINGS SYSTEM
   ============================ */
function initializeSettingsUI() {
  // Load current settings into UI controls
  const settings = state.settings;
  
  // 1. General Settings
  document.getElementById('soundEnabled').checked = settings.soundEnabled;
  document.getElementById('musicEnabled').checked = settings.musicEnabled;
  document.getElementById('animationsEnabled').checked = settings.animationsEnabled;
  document.getElementById('soundVolume').value = settings.soundVolume;
  document.getElementById('musicVolume').value = settings.musicVolume;
  document.getElementById('uiScale').value = settings.uiScale;
  document.getElementById('uiScaleValue').textContent = settings.uiScale + '%';
  
  // 2. Mobile Mode
  document.getElementById('mobileMode').checked = settings.mobileMode;
  document.getElementById('oneHandMode').value = settings.oneHandMode;
  document.getElementById('swipeNavigation').checked = settings.swipeNavigation;
  document.getElementById('compactDexMode').checked = settings.compactDexMode;
  document.getElementById('offlineCaching').checked = settings.offlineCaching;
  
  // 3. Offline Mode
  document.getElementById('offlineRolls').checked = settings.offlineRolls;
  document.getElementById('offlineAchievements').checked = settings.offlineAchievements;
  document.getElementById('offlineDexAccess').checked = settings.offlineDexAccess;
  document.getElementById('emergencyFridgeEnabled').checked = settings.emergencyFridgeEnabled;
  document.getElementById('autoSync').checked = settings.autoSync;
  
  // 4. Customization
  document.getElementById('backgroundTheme').value = settings.backgroundTheme;
  document.getElementById('themeMode').value = settings.themeMode;
  document.getElementById('floatingEmojis').checked = settings.floatingEmojis;
  document.getElementById('dexLayout').value = settings.dexLayout;
  document.getElementById('foodVariants').checked = settings.foodVariants;
  
  // 5. Performance
  document.getElementById('lowPowerMode').checked = settings.lowPowerMode;
  document.getElementById('dataSaver').checked = settings.dataSaver;
  document.getElementById('fpsLimit').value = settings.fpsLimit;
  document.getElementById('autoSaveInterval').value = settings.autoSaveInterval;
  document.getElementById('autoSaveValue').textContent = settings.autoSaveInterval + 's';
  
  // 6. Extra Fun
  document.getElementById('dailyLoginRewards').checked = settings.dailyLoginRewards;
  document.getElementById('miniGamesEnabled').checked = settings.miniGamesEnabled;
  document.getElementById('experimentalFeatures').checked = settings.experimentalFeatures;
  document.getElementById('mysteryBackgroundMode').checked = settings.mysteryBackgroundMode;
  document.getElementById('hiddenCodesEnabled').checked = settings.hiddenCodesEnabled;
  
  // Add event listeners for live updates
  addSettingsEventListeners();
  
  // Apply current settings
  applyAllSettings();
}

function addSettingsEventListeners() {
  // UI Scale slider with live preview
  document.getElementById('uiScale').addEventListener('input', (e) => {
    const value = e.target.value;
    document.getElementById('uiScaleValue').textContent = value + '%';
    state.settings.uiScale = parseInt(value);
    applyUIScale();
    saveState();
  });
  
  // Auto Save slider with live preview
  document.getElementById('autoSaveInterval').addEventListener('input', (e) => {
    const value = e.target.value;
    document.getElementById('autoSaveValue').textContent = value + 's';
    state.settings.autoSaveInterval = parseInt(value);
    saveState();
  });
  
  // All checkboxes and selects
  const settingsElements = [
    'soundEnabled', 'musicEnabled', 'animationsEnabled', 'soundVolume', 'musicVolume',
    'mobileMode', 'oneHandMode', 'swipeNavigation', 'compactDexMode', 'offlineCaching',
    'offlineRolls', 'offlineAchievements', 'offlineDexAccess', 'emergencyFridgeEnabled', 'autoSync',
    'backgroundTheme', 'themeMode', 'floatingEmojis', 'dexLayout', 'foodVariants',
    'lowPowerMode', 'dataSaver', 'fpsLimit', 
    'dailyLoginRewards', 'miniGamesEnabled', 'experimentalFeatures', 'mysteryBackgroundMode', 'hiddenCodesEnabled'
  ];
  
  settingsElements.forEach(id => {
    const element = document.getElementById(id);
    if(!element) return;
    
    element.addEventListener('change', () => {
      const settingKey = id;
      if(element.type === 'checkbox') {
        state.settings[settingKey] = element.checked;
      } else if(element.type === 'range' || element.tagName === 'SELECT') {
        const value = element.type === 'range' ? parseInt(element.value) : element.value;
        state.settings[settingKey] = value;
      }
      
      // Apply specific settings immediately
      applySettingChange(settingKey);
      saveState();
      log(`‚öôÔ∏è ${settingKey} updated!`, 'rare');
    });
  });
  
  // Save/Reset buttons
  document.getElementById('saveSettings').addEventListener('click', () => {
    saveState();
    log('üíæ Settings saved successfully!', 'legendary');
    createConfetti(40);
  });
  
  document.getElementById('resetSettings').addEventListener('click', () => {
    if(confirm('Reset all settings to defaults? This cannot be undone!')) {
      resetSettingsToDefaults();
      initializeSettingsUI();
      saveState();
      log('üîÑ Settings reset to defaults!', 'legendary');
    }
  });
}

function applyAllSettings() {
  const settings = state.settings;
  
  // Apply UI Scale
  applyUIScale();
  
  // Apply Theme
  applyThemeMode();
  
  // Apply Mobile Mode
  if(settings.mobileMode) {
    document.body.classList.add('mobile-mode');
    applyOneHandMode();
  } else {
    document.body.classList.remove('mobile-mode');
  }
  
  // Apply Low Power Mode
  if(settings.lowPowerMode) {
    document.body.classList.add('low-power-mode');
  } else {
    document.body.classList.remove('low-power-mode');
  }
  
  // Apply Background Theme
  applyBackgroundTheme();
}

function applyUIScale() {
  const scale = state.settings.uiScale / 100;
  document.documentElement.style.fontSize = (16 * scale) + 'px';
}

function applyThemeMode() {
  const theme = state.settings.themeMode;
  document.body.classList.remove('light-theme', 'dark-theme');
  
  if(theme === 'light') {
    document.body.classList.add('light-theme');
  } else if(theme === 'dark') {
    document.body.classList.add('dark-theme');
  }
  // 'auto' uses browser/system preference
}

function applyOneHandMode() {
  const mode = state.settings.oneHandMode;
  document.body.classList.remove('one-hand-left', 'one-hand-right', 'one-hand-center');
  document.body.classList.add('one-hand-' + mode);
}

function applyBackgroundTheme() {
  const theme = state.settings.backgroundTheme;
  const themes = ['default', 'street-food', 'ramen-shop', 'dessert-cafe', 'buffet-hall', 'farmers-market', 'seaside', 'tokyo', 'fantasy-castle', 'food-lab', 'hidden-garden'];
  
  // Remove all theme classes
  themes.forEach(t => document.body.classList.remove('bg-' + t));
  
  // Clear any existing theme elements
  document.querySelectorAll('.gold-glitter, .bubble-layer, .thunder-aura, .thunder-flash, .neon-sign, .steam, .floating-pastry, .sparkle, .sunflower, .wave, .neon-glow, .floating-candle, .bubbling-tube, .falling-petal').forEach(el => el.remove());
  
  if(theme !== 'default') {
    document.body.classList.add('bg-' + theme);
    addThemeElements(theme);
  }
}

function addThemeElements(theme) {
  const area = document.getElementById('floatArea');
  
  switch(theme) {
    case 'street-food':
      // Add neon sign
      const neon = document.createElement('div');
      neon.className = 'neon-sign';
      neon.textContent = 'FOOD GACHA';
      document.body.appendChild(neon);
      break;
      
    case 'ramen-shop':
      // Add steam effects
      for(let i = 0; i < 5; i++) {
        const steam = document.createElement('div');
        steam.className = 'steam';
        steam.style.left = `${20 + i * 15}%`;
        steam.style.bottom = '30%';
        steam.style.width = `${20 + Math.random() * 30}px`;
        steam.style.height = `${20 + Math.random() * 30}px`;
        steam.style.animationDelay = `${i * 1.5}s`;
        area.appendChild(steam);
      }
      break;
      
    case 'dessert-cafe':
      // Add floating pastries
      const pastries = ['üç∞', 'üßÅ', 'üçÆ', 'üç©', 'üç™', 'ü•ê'];
      for(let i = 0; i < 8; i++) {
        const pastry = document.createElement('div');
        pastry.className = 'floating-pastry';
        pastry.textContent = pastries[Math.floor(Math.random() * pastries.length)];
        pastry.style.left = `${Math.random() * 100}%`;
        pastry.style.animationDelay = `${Math.random() * 10}s`;
        area.appendChild(pastry);
      }
      break;
      
    case 'buffet-hall':
      // Add sparkle effects
      for(let i = 0; i < 15; i++) {
        const sparkle = document.createElement('div');
        sparkle.className = 'sparkle';
        sparkle.style.left = `${Math.random() * 100}%`;
        sparkle.style.top = `${Math.random() * 100}%`;
        sparkle.style.animationDelay = `${Math.random() * 3}s`;
        area.appendChild(sparkle);
      }
      break;
      
    case 'farmers-market':
      // Add sunflowers
      for(let i = 0; i < 6; i++) {
        const sunflower = document.createElement('div');
        sunflower.className = 'sunflower';
        sunflower.textContent = 'üåª';
        sunflower.style.left = `${10 + i * 15}%`;
        sunflower.style.animationDelay = `${i * 0.5}s`;
        area.appendChild(sunflower);
      }
      break;
      
    case 'seaside':
      // Add waves
      const wave = document.createElement('div');
      wave.className = 'wave';
      document.body.appendChild(wave);
      break;
      
    case 'tokyo':
      // Add neon glow text
      const neonText = document.createElement('div');
      neonText.className = 'neon-glow';
      neonText.textContent = 'FOOD GACHA';
      neonText.style.position = 'fixed';
      neonText.style.top = '20px';
      neonText.style.left = '50%';
      neonText.style.transform = 'translateX(-50%)';
      neonText.style.fontSize = '24px';
      neonText.style.fontWeight = 'bold';
      document.body.appendChild(neonText);
      break;
      
    case 'fantasy-castle':
      // Add floating candles
      for(let i = 0; i < 8; i++) {
        const candle = document.createElement('div');
        candle.className = 'floating-candle';
        candle.style.left = `${10 + i * 10}%`;
        candle.style.animationDelay = `${i * 0.7}s`;
        area.appendChild(candle);
      }
      break;
      
    case 'food-lab':
      // Add bubbling tubes
      for(let i = 0; i < 5; i++) {
        const tube = document.createElement('div');
        tube.className = 'bubbling-tube';
        tube.style.left = `${15 + i * 15}%`;
        tube.style.bottom = '20%';
        tube.style.animationDelay = `${i * 0.8}s`;
        area.appendChild(tube);
      }
      break;
      
    case 'hidden-garden':
      // Add falling petals
      for(let i = 0; i < 12; i++) {
        const petal = document.createElement('div');
        petal.className = 'falling-petal';
        petal.textContent = 'üå∏';
        petal.style.left = `${Math.random() * 100}%`;
        petal.style.animationDelay = `${Math.random() * 10}s`;
        area.appendChild(petal);
      }
      break;
  }
}

function resetSettingsToDefaults() {
  state.settings = {
    soundEnabled: true, musicEnabled: true, animationsEnabled: true,
    soundVolume: 70, musicVolume: 50, uiScale: 100,
    mobileMode: false, oneHandMode: 'center', swipeNavigation: false,
    compactDexMode: false, offlineCaching: true,
    offlineRolls: true, offlineAchievements: true, offlineDexAccess: true,
    emergencyFridgeEnabled: true, autoSync: true,
    backgroundTheme: 'default', themeMode: 'auto', floatingEmojis: true,
    dexLayout: 'grid', foodVariants: true,
    lowPowerMode: false, dataSaver: false, fpsLimit: 60, autoSaveInterval: 30,
    dailyLoginRewards: true, miniGamesEnabled: true, experimentalFeatures: false,
    mysteryBackgroundMode: false, hiddenCodesEnabled: true
  };
}

// Initialize settings when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(initializeSettingsUI, 100);
  
  // üßä Emergency Fridge button event listener
  document.getElementById('rollEmergencyFridge').addEventListener('click', rollEmergencyFridge);
  
  // üéÆ Mini-game button event listener
  document.getElementById('playMiniGame').addEventListener('click', showMiniGame);
  
  // üåê Offline status detection
  setInterval(detectOfflineStatus, 5000); // Check every 5 seconds
  window.addEventListener('online', detectOfflineStatus);
  window.addEventListener('offline', detectOfflineStatus);
  
  // üèÜ Update leaderboard on significant achievements
  setInterval(() => {
    if(state.pulls > 0 && state.pulls % 50 === 0) {
      updateLocalLeaderboard();
    }
  }, 30000); // Check every 30 seconds
  
  // Initialize offline detection
  setTimeout(detectOfflineStatus, 1000);
});
</script>
</body>
</html>
